
build/main.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Größe     VMA       LMA       Datei-Off Ausr.
  0 .text         000000b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b4  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000859  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001bd  00000000  00000000  00000881  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015a  00000000  00000000  00000a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000c2  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016b  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000024  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <delay_ms>:
    @return none
*/
void delay_ms(uint16_t ms)
{
    uint16_t t=0;
    for (t=0; t<=ms; t++) {
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	ef e9       	ldi	r30, 0x9F	; 159
  72:	ff e0       	ldi	r31, 0x0F	; 15
  74:	31 97       	sbiw	r30, 0x01	; 1
  76:	f1 f7       	brne	.-4      	; 0x74 <delay_ms+0x8>
  78:	00 c0       	rjmp	.+0      	; 0x7a <delay_ms+0xe>
  7a:	00 00       	nop
  7c:	2f 5f       	subi	r18, 0xFF	; 255
  7e:	3f 4f       	sbci	r19, 0xFF	; 255
  80:	82 17       	cp	r24, r18
  82:	93 07       	cpc	r25, r19
  84:	a8 f7       	brcc	.-22     	; 0x70 <delay_ms+0x4>
        _delay_ms(1);
    }
}
  86:	08 95       	ret

00000088 <lamptest>:
   //~ pin_high(LED01);
   //~ delay_ms(delay);
   //~ pin_low(LED01);
   //~ delay_ms(delay);
//~
   pin_high(LED02);
  88:	c1 9a       	sbi	0x18, 1	; 24
   delay_ms(delay);
  8a:	84 ef       	ldi	r24, 0xF4	; 244
  8c:	91 e0       	ldi	r25, 0x01	; 1
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <delay_ms>
   pin_low(LED02);
  92:	c1 98       	cbi	0x18, 1	; 24
   delay_ms(delay);
  94:	84 ef       	ldi	r24, 0xF4	; 244
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	0c 94 36 00 	jmp	0x6c	; 0x6c <delay_ms>

0000009c <main>:

int main(void)
{

    // Define outputs
    DDRB = 0xff;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	87 bb       	out	0x17, r24	; 23
    DDRC = 0xFF;
  a0:	84 bb       	out	0x14, r24	; 20
    DDRD = 0xFF;
  a2:	81 bb       	out	0x11, r24	; 17

    // Initialize all outputs as low.
    PORTB = 0;
  a4:	18 ba       	out	0x18, r1	; 24
    PORTC = 0;
  a6:	15 ba       	out	0x15, r1	; 21
    PORTD = 0;
  a8:	12 ba       	out	0x12, r1	; 18
    // Output test run


    // Endless loop
    while(1) {
        lamptest();
  aa:	0e 94 44 00 	call	0x88	; 0x88 <lamptest>
  ae:	fd cf       	rjmp	.-6      	; 0xaa <main+0xe>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
