   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	delay_ms
  12               	delay_ms:
  13               	.LFB6:
  14               		.file 1 "delay_ms.h"
   1:delay_ms.h    **** /*
   2:delay_ms.h    **** ********************************************************************************
   3:delay_ms.h    **** *                                  delay_ms.h                                  *
   4:delay_ms.h    **** ********************************************************************************
   5:delay_ms.h    **** 
   6:delay_ms.h    **** 
   7:delay_ms.h    **** * INTRODUCTION
   8:delay_ms.h    **** * ------------
   9:delay_ms.h    **** *
  10:delay_ms.h    **** * The function calls the original _delay_ms() from util/delay.h for 1
  11:delay_ms.h    **** * milisecond and repeats that for the desired timespan.
  12:delay_ms.h    **** *
  13:delay_ms.h    **** *
  14:delay_ms.h    **** * SITE NOTICE
  15:delay_ms.h    **** * -----------
  16:delay_ms.h    **** *
  17:delay_ms.h    **** * Developer:    Florian Meissner
  18:delay_ms.h    **** *               n1990b@gmx.de
  19:delay_ms.h    **** * Version:      1.1
  20:delay_ms.h    **** * Release date: 05/05/2017
  21:delay_ms.h    **** *
  22:delay_ms.h    **** */
  23:delay_ms.h    **** 
  24:delay_ms.h    **** #include <util/delay.h>
  25:delay_ms.h    **** 
  26:delay_ms.h    **** /**
  27:delay_ms.h    ****     @brief  Delay program execution.
  28:delay_ms.h    ****     @param  uint16_t
  29:delay_ms.h    ****     @return none
  30:delay_ms.h    **** */
  31:delay_ms.h    **** void delay_ms(uint16_t ms)
  32:delay_ms.h    **** {
  15               		.loc 1 32 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  33:delay_ms.h    ****     uint16_t t=0;
  34:delay_ms.h    ****     for (t=0; t<=ms; t++) {
  22               		.loc 1 34 0
  23 0000 20E0      		ldi r18,0
  24 0002 30E0      		ldi r19,0
  25               	.LVL1:
  26               	.L3:
  27               	.LBB4:
  28               	.LBB5:
  29               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  30               		.loc 2 164 0
  31 0004 EFE9      		ldi r30,lo8(3999)
  32 0006 FFE0      		ldi r31,hi8(3999)
  33 0008 3197      		1: sbiw r30,1
  34 000a 01F4      		brne 1b
  35 000c 00C0      		rjmp .
  36 000e 0000      		nop
  37               	.LBE5:
  38               	.LBE4:
  39               		.loc 1 34 0
  40 0010 2F5F      		subi r18,-1
  41 0012 3F4F      		sbci r19,-1
  42               	.LVL2:
  43 0014 8217      		cp r24,r18
  44 0016 9307      		cpc r25,r19
  45 0018 00F4      		brsh .L3
  46               	/* epilogue start */
  35:delay_ms.h    ****         _delay_ms(1);
  36:delay_ms.h    ****     }
  37:delay_ms.h    **** }
  47               		.loc 1 37 0
  48 001a 0895      		ret
  49               		.cfi_endproc
  50               	.LFE6:
  52               	.global	lamptest
  54               	lamptest:
  55               	.LFB7:
  56               		.file 3 "leds.h"
   1:leds.h        **** /*
   2:leds.h        ****  * leds.h
   3:leds.h        ****  *
   4:leds.h        ****  * Defines functions to set and reset specific LED's.
   5:leds.h        ****  *
   6:leds.h        ****  */
   7:leds.h        **** 
   8:leds.h        **** 
   9:leds.h        **** #define LED01 B, PB0   // LED01, red
  10:leds.h        **** #define LED02 B, PB1   // LED02, red
  11:leds.h        **** #define LED03 B, PB2   // LED03, red
  12:leds.h        **** #define LED04 B, PB3   // LED04, red
  13:leds.h        **** #define LED05 C, PC7   // LED05, red
  14:leds.h        **** #define LED06 C, PC6   // LED06, yellow
  15:leds.h        **** #define LED07 C, PC5   // LED07, yellow
  16:leds.h        **** #define LED08 D, PD0   // LED08, yellow
  17:leds.h        **** #define LED09 C, PC4   // LED09, yellow
  18:leds.h        **** #define LED10 D, PD1   // LED10, yellow
  19:leds.h        **** #define LED11 C, PC3   // LED11, green
  20:leds.h        **** #define LED12 D, PD2   // LED12, green
  21:leds.h        **** #define LED13 C, PC2   // LED13, green
  22:leds.h        **** #define LED14 D, PD3   // LED14, green
  23:leds.h        **** #define LED15 C, PC1   // LED15, green
  24:leds.h        **** #define LED16 D, PD4   // LED16, green
  25:leds.h        **** #define LED17 C, PC0   // LED17, green
  26:leds.h        **** #define LED18 D, PD5   // LED18, green
  27:leds.h        **** #define LED19 D, PD7   // LED19, green
  28:leds.h        **** #define LED20 D, PD6   // LED20, green
  29:leds.h        **** 
  30:leds.h        **** 
  31:leds.h        **** 
  32:leds.h        **** void lamptest() {
  57               		.loc 3 32 0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  63               	.LVL3:
  33:leds.h        ****    int delay = 250;
  34:leds.h        **** 
  35:leds.h        ****    pin_high(LED01);
  64               		.loc 3 35 0
  65 001c C09A      		sbi 0x18,0
  36:leds.h        ****    delay_ms(delay);
  66               		.loc 3 36 0
  67 001e 8AEF      		ldi r24,lo8(-6)
  68 0020 90E0      		ldi r25,0
  69 0022 0E94 0000 		call delay_ms
  70               	.LVL4:
  37:leds.h        ****    pin_low(LED01);
  71               		.loc 3 37 0
  72 0026 C098      		cbi 0x18,0
  38:leds.h        ****    //~ delay_ms(delay);
  39:leds.h        **** 
  40:leds.h        ****    pin_high(LED02);
  73               		.loc 3 40 0
  74 0028 C19A      		sbi 0x18,1
  41:leds.h        ****    delay_ms(delay);
  75               		.loc 3 41 0
  76 002a 8AEF      		ldi r24,lo8(-6)
  77 002c 90E0      		ldi r25,0
  78 002e 0E94 0000 		call delay_ms
  79               	.LVL5:
  42:leds.h        ****    pin_low(LED02);
  80               		.loc 3 42 0
  81 0032 C198      		cbi 0x18,1
  43:leds.h        ****    //~ delay_ms(delay);
  44:leds.h        **** 
  45:leds.h        ****    pin_high(LED03);
  82               		.loc 3 45 0
  83 0034 C29A      		sbi 0x18,2
  46:leds.h        ****    delay_ms(delay);
  84               		.loc 3 46 0
  85 0036 8AEF      		ldi r24,lo8(-6)
  86 0038 90E0      		ldi r25,0
  87 003a 0E94 0000 		call delay_ms
  88               	.LVL6:
  47:leds.h        ****    pin_low(LED03);
  89               		.loc 3 47 0
  90 003e C298      		cbi 0x18,2
  48:leds.h        ****    //~ delay_ms(delay);
  49:leds.h        **** 
  50:leds.h        ****    pin_high(LED04);
  91               		.loc 3 50 0
  92 0040 C39A      		sbi 0x18,3
  51:leds.h        ****    delay_ms(delay);
  93               		.loc 3 51 0
  94 0042 8AEF      		ldi r24,lo8(-6)
  95 0044 90E0      		ldi r25,0
  96 0046 0E94 0000 		call delay_ms
  97               	.LVL7:
  52:leds.h        ****    pin_low(LED04);
  98               		.loc 3 52 0
  99 004a C398      		cbi 0x18,3
  53:leds.h        ****    //~ delay_ms(delay);
  54:leds.h        **** 
  55:leds.h        ****    pin_high(LED05);
 100               		.loc 3 55 0
 101 004c AF9A      		sbi 0x15,7
  56:leds.h        ****    delay_ms(delay);
 102               		.loc 3 56 0
 103 004e 8AEF      		ldi r24,lo8(-6)
 104 0050 90E0      		ldi r25,0
 105 0052 0E94 0000 		call delay_ms
 106               	.LVL8:
  57:leds.h        ****    pin_low(LED05);
 107               		.loc 3 57 0
 108 0056 AF98      		cbi 0x15,7
  58:leds.h        ****    //~ delay_ms(delay);
  59:leds.h        **** 
  60:leds.h        ****    pin_high(LED06);
 109               		.loc 3 60 0
 110 0058 AE9A      		sbi 0x15,6
  61:leds.h        ****    delay_ms(delay);
 111               		.loc 3 61 0
 112 005a 8AEF      		ldi r24,lo8(-6)
 113 005c 90E0      		ldi r25,0
 114 005e 0E94 0000 		call delay_ms
 115               	.LVL9:
  62:leds.h        ****    pin_low(LED06);
 116               		.loc 3 62 0
 117 0062 AE98      		cbi 0x15,6
  63:leds.h        ****    //~ delay_ms(delay);
  64:leds.h        **** 
  65:leds.h        ****    pin_high(LED07);
 118               		.loc 3 65 0
 119 0064 AD9A      		sbi 0x15,5
  66:leds.h        ****    delay_ms(delay);
 120               		.loc 3 66 0
 121 0066 8AEF      		ldi r24,lo8(-6)
 122 0068 90E0      		ldi r25,0
 123 006a 0E94 0000 		call delay_ms
 124               	.LVL10:
  67:leds.h        ****    pin_low(LED07);
 125               		.loc 3 67 0
 126 006e AD98      		cbi 0x15,5
  68:leds.h        ****    //~ delay_ms(delay);
  69:leds.h        **** 
  70:leds.h        ****    pin_high(LED08);
 127               		.loc 3 70 0
 128 0070 909A      		sbi 0x12,0
  71:leds.h        ****    delay_ms(delay);
 129               		.loc 3 71 0
 130 0072 8AEF      		ldi r24,lo8(-6)
 131 0074 90E0      		ldi r25,0
 132 0076 0E94 0000 		call delay_ms
 133               	.LVL11:
  72:leds.h        ****    pin_low(LED08);
 134               		.loc 3 72 0
 135 007a 9098      		cbi 0x12,0
  73:leds.h        ****    //~ delay_ms(delay);
  74:leds.h        **** 
  75:leds.h        ****    pin_high(LED09);
 136               		.loc 3 75 0
 137 007c AC9A      		sbi 0x15,4
  76:leds.h        ****    delay_ms(delay);
 138               		.loc 3 76 0
 139 007e 8AEF      		ldi r24,lo8(-6)
 140 0080 90E0      		ldi r25,0
 141 0082 0E94 0000 		call delay_ms
 142               	.LVL12:
  77:leds.h        ****    pin_low(LED09);
 143               		.loc 3 77 0
 144 0086 AC98      		cbi 0x15,4
  78:leds.h        ****    //~ delay_ms(delay);
  79:leds.h        **** 
  80:leds.h        ****    pin_high(LED10);
 145               		.loc 3 80 0
 146 0088 919A      		sbi 0x12,1
  81:leds.h        ****    delay_ms(delay);
 147               		.loc 3 81 0
 148 008a 8AEF      		ldi r24,lo8(-6)
 149 008c 90E0      		ldi r25,0
 150 008e 0E94 0000 		call delay_ms
 151               	.LVL13:
  82:leds.h        ****    pin_low(LED10);
 152               		.loc 3 82 0
 153 0092 9198      		cbi 0x12,1
  83:leds.h        ****    //~ delay_ms(delay);
  84:leds.h        **** 
  85:leds.h        ****    pin_high(LED11);
 154               		.loc 3 85 0
 155 0094 AB9A      		sbi 0x15,3
  86:leds.h        ****    delay_ms(delay);
 156               		.loc 3 86 0
 157 0096 8AEF      		ldi r24,lo8(-6)
 158 0098 90E0      		ldi r25,0
 159 009a 0E94 0000 		call delay_ms
 160               	.LVL14:
  87:leds.h        ****    pin_low(LED11);
 161               		.loc 3 87 0
 162 009e AB98      		cbi 0x15,3
  88:leds.h        ****    //~ delay_ms(delay);
  89:leds.h        **** 
  90:leds.h        ****    pin_high(LED12);
 163               		.loc 3 90 0
 164 00a0 929A      		sbi 0x12,2
  91:leds.h        ****    delay_ms(delay);
 165               		.loc 3 91 0
 166 00a2 8AEF      		ldi r24,lo8(-6)
 167 00a4 90E0      		ldi r25,0
 168 00a6 0E94 0000 		call delay_ms
 169               	.LVL15:
  92:leds.h        ****    pin_low(LED12);
 170               		.loc 3 92 0
 171 00aa 9298      		cbi 0x12,2
  93:leds.h        ****    //~ delay_ms(delay);
  94:leds.h        **** 
  95:leds.h        ****    pin_high(LED13);
 172               		.loc 3 95 0
 173 00ac AA9A      		sbi 0x15,2
  96:leds.h        ****    delay_ms(delay);
 174               		.loc 3 96 0
 175 00ae 8AEF      		ldi r24,lo8(-6)
 176 00b0 90E0      		ldi r25,0
 177 00b2 0E94 0000 		call delay_ms
 178               	.LVL16:
  97:leds.h        ****    pin_low(LED13);
 179               		.loc 3 97 0
 180 00b6 AA98      		cbi 0x15,2
  98:leds.h        ****    //~ delay_ms(delay);
  99:leds.h        **** 
 100:leds.h        ****    pin_high(LED14);
 181               		.loc 3 100 0
 182 00b8 939A      		sbi 0x12,3
 101:leds.h        ****    delay_ms(delay);
 183               		.loc 3 101 0
 184 00ba 8AEF      		ldi r24,lo8(-6)
 185 00bc 90E0      		ldi r25,0
 186 00be 0E94 0000 		call delay_ms
 187               	.LVL17:
 102:leds.h        ****    pin_low(LED14);
 188               		.loc 3 102 0
 189 00c2 9398      		cbi 0x12,3
 103:leds.h        ****    //~ delay_ms(delay);
 104:leds.h        **** 
 105:leds.h        ****    pin_high(LED15);
 190               		.loc 3 105 0
 191 00c4 A99A      		sbi 0x15,1
 106:leds.h        ****    delay_ms(delay);
 192               		.loc 3 106 0
 193 00c6 8AEF      		ldi r24,lo8(-6)
 194 00c8 90E0      		ldi r25,0
 195 00ca 0E94 0000 		call delay_ms
 196               	.LVL18:
 107:leds.h        ****    pin_low(LED15);
 197               		.loc 3 107 0
 198 00ce A998      		cbi 0x15,1
 108:leds.h        ****    //~ delay_ms(delay);
 109:leds.h        **** 
 110:leds.h        ****    pin_high(LED16);
 199               		.loc 3 110 0
 200 00d0 949A      		sbi 0x12,4
 111:leds.h        ****    delay_ms(delay);
 201               		.loc 3 111 0
 202 00d2 8AEF      		ldi r24,lo8(-6)
 203 00d4 90E0      		ldi r25,0
 204 00d6 0E94 0000 		call delay_ms
 205               	.LVL19:
 112:leds.h        ****    pin_low(LED16);
 206               		.loc 3 112 0
 207 00da 9498      		cbi 0x12,4
 113:leds.h        ****    //~ delay_ms(delay);
 114:leds.h        **** 
 115:leds.h        ****    pin_high(LED17);
 208               		.loc 3 115 0
 209 00dc A89A      		sbi 0x15,0
 116:leds.h        ****    delay_ms(delay);
 210               		.loc 3 116 0
 211 00de 8AEF      		ldi r24,lo8(-6)
 212 00e0 90E0      		ldi r25,0
 213 00e2 0E94 0000 		call delay_ms
 214               	.LVL20:
 117:leds.h        ****    pin_low(LED17);
 215               		.loc 3 117 0
 216 00e6 A898      		cbi 0x15,0
 118:leds.h        ****    //~ delay_ms(delay);
 119:leds.h        **** 
 120:leds.h        ****    pin_high(LED18);
 217               		.loc 3 120 0
 218 00e8 959A      		sbi 0x12,5
 121:leds.h        ****    delay_ms(delay);
 219               		.loc 3 121 0
 220 00ea 8AEF      		ldi r24,lo8(-6)
 221 00ec 90E0      		ldi r25,0
 222 00ee 0E94 0000 		call delay_ms
 223               	.LVL21:
 122:leds.h        ****    pin_low(LED18);
 224               		.loc 3 122 0
 225 00f2 9598      		cbi 0x12,5
 123:leds.h        ****    //~ delay_ms(delay);
 124:leds.h        **** 
 125:leds.h        ****    pin_high(LED19);
 226               		.loc 3 125 0
 227 00f4 979A      		sbi 0x12,7
 126:leds.h        ****    delay_ms(delay);
 228               		.loc 3 126 0
 229 00f6 8AEF      		ldi r24,lo8(-6)
 230 00f8 90E0      		ldi r25,0
 231 00fa 0E94 0000 		call delay_ms
 232               	.LVL22:
 127:leds.h        ****    pin_low(LED19);
 233               		.loc 3 127 0
 234 00fe 9798      		cbi 0x12,7
 128:leds.h        ****    //~ delay_ms(delay);
 129:leds.h        **** 
 130:leds.h        ****    pin_high(LED20);
 235               		.loc 3 130 0
 236 0100 969A      		sbi 0x12,6
 131:leds.h        ****    delay_ms(delay);
 237               		.loc 3 131 0
 238 0102 8AEF      		ldi r24,lo8(-6)
 239 0104 90E0      		ldi r25,0
 240 0106 0E94 0000 		call delay_ms
 241               	.LVL23:
 132:leds.h        ****    pin_low(LED20);
 242               		.loc 3 132 0
 243 010a 9698      		cbi 0x12,6
 244 010c 0895      		ret
 245               		.cfi_endproc
 246               	.LFE7:
 248               		.section	.text.startup,"ax",@progbits
 249               	.global	main
 251               	main:
 252               	.LFB8:
 253               		.file 4 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * main.c
   3:main.c        ****  *
   4:main.c        ****  * Angle of Attack Indicator
   5:main.c        ****  * =========================
   6:main.c        ****  *
   7:main.c        ****  * The AoA indicator module receives prussure data via UART from AoA sensor module. It converts
   8:main.c        ****  * these data into inH2O values used to drive a 20 unit LED bargraph.
   9:main.c        ****  *
  10:main.c        ****  * Florian Meissner
  11:main.c        ****  * n1990b@gmx.de
  12:main.c        ****  * February 2018
  13:main.c        ****  *
  14:main.c        ****  *
  15:main.c        ****  */
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** #ifndef F_CPU
  19:main.c        ****     #warning "Setting F_CPU to 1600000UL."
  20:main.c        ****     #define F_CPU 16000000UL
  21:main.c        **** #endif
  22:main.c        **** 
  23:main.c        **** #include <avr/io.h>
  24:main.c        **** #include <stdint.h>
  25:main.c        **** #include "delay_ms.h"
  26:main.c        **** //~ #include "bool.h"
  27:main.c        **** #include "io.h"
  28:main.c        **** #include "leds.h"
  29:main.c        **** 
  30:main.c        **** 
  31:main.c        **** int main(void)
  32:main.c        **** {
 254               		.loc 4 32 0
 255               		.cfi_startproc
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 0 */
 259               	.L__stack_usage = 0
  33:main.c        **** 
  34:main.c        ****     // Define outputs
  35:main.c        ****     DDRB = 0xff;
 260               		.loc 4 35 0
 261 0000 8FEF      		ldi r24,lo8(-1)
 262 0002 87BB      		out 0x17,r24
  36:main.c        ****     DDRC = 0xFF;
 263               		.loc 4 36 0
 264 0004 84BB      		out 0x14,r24
  37:main.c        ****     DDRD = 0xFF;
 265               		.loc 4 37 0
 266 0006 81BB      		out 0x11,r24
  38:main.c        **** 
  39:main.c        ****     // Initialize all outputs as low.
  40:main.c        ****     PORTB = 0;
 267               		.loc 4 40 0
 268 0008 18BA      		out 0x18,__zero_reg__
  41:main.c        ****     PORTC = 0;
 269               		.loc 4 41 0
 270 000a 15BA      		out 0x15,__zero_reg__
  42:main.c        ****     PORTD = 0;
 271               		.loc 4 42 0
 272 000c 12BA      		out 0x12,__zero_reg__
  43:main.c        **** 
  44:main.c        ****     // Output test run
  45:main.c        ****     lamptest();
 273               		.loc 4 45 0
 274 000e 0E94 0000 		call lamptest
 275               	.LVL24:
 276               	.L7:
 277 0012 00C0      		rjmp .L7
 278               		.cfi_endproc
 279               	.LFE8:
 281               		.text
 282               	.Letext0:
 283               		.file 5 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccjqbcCC.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccjqbcCC.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccjqbcCC.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccjqbcCC.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccjqbcCC.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccjqbcCC.s:12     .text:0000000000000000 delay_ms
     /tmp/ccjqbcCC.s:54     .text:000000000000001c lamptest
     /tmp/ccjqbcCC.s:251    .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
