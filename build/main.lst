   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	delay_ms
  12               	delay_ms:
  13               	.LFB6:
  14               		.file 1 "delay_ms.h"
   1:delay_ms.h    **** /*
   2:delay_ms.h    **** ********************************************************************************
   3:delay_ms.h    **** *                                  delay_ms.h                                  *
   4:delay_ms.h    **** ********************************************************************************
   5:delay_ms.h    **** 
   6:delay_ms.h    **** 
   7:delay_ms.h    **** * INTRODUCTION
   8:delay_ms.h    **** * ------------
   9:delay_ms.h    **** *
  10:delay_ms.h    **** * The function calls the original _delay_ms() from util/delay.h for 1
  11:delay_ms.h    **** * milisecond and repeats that for the desired timespan.
  12:delay_ms.h    **** *
  13:delay_ms.h    **** *
  14:delay_ms.h    **** * SITE NOTICE
  15:delay_ms.h    **** * -----------
  16:delay_ms.h    **** *
  17:delay_ms.h    **** * Developer:    Florian Meissner
  18:delay_ms.h    **** *               n1990b@gmx.de
  19:delay_ms.h    **** * Version:      1.1
  20:delay_ms.h    **** * Release date: 05/05/2017
  21:delay_ms.h    **** *
  22:delay_ms.h    **** */
  23:delay_ms.h    **** 
  24:delay_ms.h    **** #include <util/delay.h>
  25:delay_ms.h    **** 
  26:delay_ms.h    **** /**
  27:delay_ms.h    ****     @brief  Delay program execution.
  28:delay_ms.h    ****     @param  uint16_t
  29:delay_ms.h    ****     @return none
  30:delay_ms.h    **** */
  31:delay_ms.h    **** void delay_ms(uint16_t ms)
  32:delay_ms.h    **** {
  15               		.loc 1 32 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  33:delay_ms.h    ****     uint16_t t=0;
  34:delay_ms.h    ****     for (t=0; t<=ms; t++) {
  22               		.loc 1 34 0
  23 0000 20E0      		ldi r18,0
  24 0002 30E0      		ldi r19,0
  25               	.LVL1:
  26               	.L3:
  27               	.LBB4:
  28               	.LBB5:
  29               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  30               		.loc 2 164 0
  31 0004 EFE9      		ldi r30,lo8(3999)
  32 0006 FFE0      		ldi r31,hi8(3999)
  33 0008 3197      		1: sbiw r30,1
  34 000a 01F4      		brne 1b
  35 000c 00C0      		rjmp .
  36 000e 0000      		nop
  37               	.LBE5:
  38               	.LBE4:
  39               		.loc 1 34 0
  40 0010 2F5F      		subi r18,-1
  41 0012 3F4F      		sbci r19,-1
  42               	.LVL2:
  43 0014 8217      		cp r24,r18
  44 0016 9307      		cpc r25,r19
  45 0018 00F4      		brsh .L3
  46               	/* epilogue start */
  35:delay_ms.h    ****         _delay_ms(1);
  36:delay_ms.h    ****     }
  37:delay_ms.h    **** }
  47               		.loc 1 37 0
  48 001a 0895      		ret
  49               		.cfi_endproc
  50               	.LFE6:
  52               	.global	setLED
  54               	setLED:
  55               	.LFB7:
  56               		.file 3 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * main.c
   3:main.c        ****  *
   4:main.c        ****  * Angle of Attack Indicator
   5:main.c        ****  * =========================
   6:main.c        ****  *
   7:main.c        ****  * The AoA indicator module receives prussure data via UART from AoA sensor module. It converts
   8:main.c        ****  * these data into inH2O values used to drive a 20 unit LED bargraph.
   9:main.c        ****  *
  10:main.c        ****  * Florian Meissner
  11:main.c        ****  * n1990b@gmx.de
  12:main.c        ****  * February 2018
  13:main.c        ****  *
  14:main.c        ****  *
  15:main.c        ****  */
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** #ifndef F_CPU
  19:main.c        ****     #warning "Setting F_CPU to 1600000UL."
  20:main.c        ****     #define F_CPU 16000000UL
  21:main.c        **** #endif
  22:main.c        **** 
  23:main.c        **** #include <avr/io.h>
  24:main.c        **** #include <stdint.h>
  25:main.c        **** #include "delay_ms.h"
  26:main.c        **** //~ #include "bool.h"
  27:main.c        **** #include "io.h"
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** #define LED B,PB0
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** void setLED(led) {
  57               		.loc 3 33 0
  58               		.cfi_startproc
  59               	.LVL3:
  60               	/* prologue: function */
  61               	/* frame size = 0 */
  62               	/* stack size = 0 */
  63               	.L__stack_usage = 0
  34:main.c        ****     PORTB |= (1<<PB0);
  64               		.loc 3 34 0
  65 001c C09A      		sbi 0x18,0
  66 001e 0895      		ret
  67               		.cfi_endproc
  68               	.LFE7:
  70               		.section	.text.startup,"ax",@progbits
  71               	.global	main
  73               	main:
  74               	.LFB8:
  35:main.c        **** }
  36:main.c        **** 
  37:main.c        **** 
  38:main.c        **** int main(void)
  39:main.c        **** {
  75               		.loc 3 39 0
  76               		.cfi_startproc
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  40:main.c        **** 
  41:main.c        ****     // Define outputs
  42:main.c        ****     DDRB = 0xff;
  81               		.loc 3 42 0
  82 0000 8FEF      		ldi r24,lo8(-1)
  83 0002 87BB      		out 0x17,r24
  43:main.c        ****     DDRC = 0xFF;
  84               		.loc 3 43 0
  85 0004 84BB      		out 0x14,r24
  44:main.c        ****     DDRD = 0xFF;
  86               		.loc 3 44 0
  87 0006 81BB      		out 0x11,r24
  45:main.c        **** 
  46:main.c        ****     // Initialize all outputs as low.
  47:main.c        ****     PORTB = 0;
  88               		.loc 3 47 0
  89 0008 18BA      		out 0x18,__zero_reg__
  48:main.c        ****     PORTC = 0;
  90               		.loc 3 48 0
  91 000a 15BA      		out 0x15,__zero_reg__
  49:main.c        ****     PORTD = 0;
  92               		.loc 3 49 0
  93 000c 12BA      		out 0x12,__zero_reg__
  94               	.L7:
  50:main.c        **** 
  51:main.c        ****     // Output test run
  52:main.c        ****     //~ lamptest();
  53:main.c        ****     //~ setLED(1);
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        ****     // Endless loop
  57:main.c        ****     while(1) {
  58:main.c        ****         //~ PORTB |= (1<<PB0);
  59:main.c        ****         pin_high(LED);
  95               		.loc 3 59 0 discriminator 1
  96 000e C09A      		sbi 0x18,0
  60:main.c        ****         delay_ms(1000);
  97               		.loc 3 60 0 discriminator 1
  98 0010 88EE      		ldi r24,lo8(-24)
  99 0012 93E0      		ldi r25,lo8(3)
 100 0014 0E94 0000 		call delay_ms
 101               	.LVL4:
  61:main.c        ****         //~ PORTB &= ~(1<<PB0);
  62:main.c        ****         pin_low(LED);
 102               		.loc 3 62 0 discriminator 1
 103 0018 C098      		cbi 0x18,0
  63:main.c        ****         delay_ms(1000);
 104               		.loc 3 63 0 discriminator 1
 105 001a 88EE      		ldi r24,lo8(-24)
 106 001c 93E0      		ldi r25,lo8(3)
 107 001e 0E94 0000 		call delay_ms
 108               	.LVL5:
 109 0022 00C0      		rjmp .L7
 110               		.cfi_endproc
 111               	.LFE8:
 113               		.text
 114               	.Letext0:
 115               		.file 4 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccc7jFDD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccc7jFDD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccc7jFDD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccc7jFDD.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccc7jFDD.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccc7jFDD.s:12     .text:0000000000000000 delay_ms
     /tmp/ccc7jFDD.s:54     .text:000000000000001c setLED
     /tmp/ccc7jFDD.s:73     .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
