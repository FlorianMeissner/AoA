   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	delay_ms
  12               	delay_ms:
  13               	.LFB6:
  14               		.file 1 "delay_ms.h"
   1:delay_ms.h    **** /*
   2:delay_ms.h    **** ********************************************************************************
   3:delay_ms.h    **** *                                  delay_ms.h                                  *
   4:delay_ms.h    **** ********************************************************************************
   5:delay_ms.h    **** 
   6:delay_ms.h    **** 
   7:delay_ms.h    **** * INTRODUCTION
   8:delay_ms.h    **** * ------------
   9:delay_ms.h    **** *
  10:delay_ms.h    **** * The function calls the original _delay_ms() from util/delay.h for 1
  11:delay_ms.h    **** * milisecond and repeats that for the desired timespan.
  12:delay_ms.h    **** *
  13:delay_ms.h    **** *
  14:delay_ms.h    **** * SITE NOTICE
  15:delay_ms.h    **** * -----------
  16:delay_ms.h    **** *
  17:delay_ms.h    **** * Developer:    Florian Meissner
  18:delay_ms.h    **** *               n1990b@gmx.de
  19:delay_ms.h    **** * Version:      1.1
  20:delay_ms.h    **** * Release date: 05/05/2017
  21:delay_ms.h    **** *
  22:delay_ms.h    **** */
  23:delay_ms.h    **** 
  24:delay_ms.h    **** #include <util/delay.h>
  25:delay_ms.h    **** 
  26:delay_ms.h    **** /**
  27:delay_ms.h    ****     @brief  Delay program execution.
  28:delay_ms.h    ****     @param  uint16_t
  29:delay_ms.h    ****     @return none
  30:delay_ms.h    **** */
  31:delay_ms.h    **** void delay_ms(uint16_t ms)
  32:delay_ms.h    **** {
  15               		.loc 1 32 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  33:delay_ms.h    ****     uint16_t t=0;
  34:delay_ms.h    ****     for (t=0; t<=ms; t++) {
  22               		.loc 1 34 0
  23 0000 20E0      		ldi r18,0
  24 0002 30E0      		ldi r19,0
  25               	.LVL1:
  26               	.L3:
  27               	.LBB4:
  28               	.LBB5:
  29               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  30               		.loc 2 164 0
  31 0004 EFE9      		ldi r30,lo8(3999)
  32 0006 FFE0      		ldi r31,hi8(3999)
  33 0008 3197      		1: sbiw r30,1
  34 000a 01F4      		brne 1b
  35 000c 00C0      		rjmp .
  36 000e 0000      		nop
  37               	.LBE5:
  38               	.LBE4:
  39               		.loc 1 34 0
  40 0010 2F5F      		subi r18,-1
  41 0012 3F4F      		sbci r19,-1
  42               	.LVL2:
  43 0014 8217      		cp r24,r18
  44 0016 9307      		cpc r25,r19
  45 0018 00F4      		brsh .L3
  46               	/* epilogue start */
  35:delay_ms.h    ****         _delay_ms(1);
  36:delay_ms.h    ****     }
  37:delay_ms.h    **** }
  47               		.loc 1 37 0
  48 001a 0895      		ret
  49               		.cfi_endproc
  50               	.LFE6:
  52               	.global	LED_reset
  54               	LED_reset:
  55               	.LFB8:
  56               		.file 3 "leds.h"
   1:leds.h        **** /*
   2:leds.h        ****  * leds.h
   3:leds.h        ****  *
   4:leds.h        ****  * LED definitions
   5:leds.h        ****  * ===============
   6:leds.h        ****  *
   7:leds.h        ****  * Defines functions to set and reset specific LED's.
   8:leds.h        ****  *
   9:leds.h        ****  *
  10:leds.h        ****  * Florian Meissner
  11:leds.h        ****  * n1990b@gmx.de
  12:leds.h        ****  * February 2018
  13:leds.h        ****  *
  14:leds.h        ****  */
  15:leds.h        **** 
  16:leds.h        **** 
  17:leds.h        **** #define LED01 B, PB0   // LED01, red
  18:leds.h        **** #define LED02 B, PB1   // LED02, red
  19:leds.h        **** #define LED03 B, PB2   // LED03, red
  20:leds.h        **** #define LED04 B, PB3   // LED04, red
  21:leds.h        **** #define LED05 C, PC7   // LED05, red
  22:leds.h        **** #define LED06 C, PC6   // LED06, yellow
  23:leds.h        **** #define LED07 C, PC5   // LED07, yellow
  24:leds.h        **** #define LED08 D, PD0   // LED08, yellow
  25:leds.h        **** #define LED09 C, PC4   // LED09, yellow
  26:leds.h        **** #define LED10 D, PD1   // LED10, yellow
  27:leds.h        **** #define LED11 C, PC3   // LED11, green
  28:leds.h        **** #define LED12 D, PD2   // LED12, green
  29:leds.h        **** #define LED13 C, PC2   // LED13, green
  30:leds.h        **** #define LED14 D, PD3   // LED14, green
  31:leds.h        **** #define LED15 C, PC1   // LED15, green
  32:leds.h        **** #define LED16 D, PD4   // LED16, green
  33:leds.h        **** #define LED17 C, PC0   // LED17, green
  34:leds.h        **** #define LED18 D, PD5   // LED18, green
  35:leds.h        **** #define LED19 D, PD7   // LED19, green
  36:leds.h        **** #define LED20 D, PD6   // LED20, green
  37:leds.h        **** 
  38:leds.h        **** 
  39:leds.h        **** /**
  40:leds.h        ****     @brief  Initialize all LED outputs.
  41:leds.h        ****     @param  none
  42:leds.h        ****     @return none
  43:leds.h        **** **/
  44:leds.h        **** void LED_init(void)
  45:leds.h        **** {
  46:leds.h        ****     set_dir_out(LED01);
  47:leds.h        ****     set_dir_out(LED02);
  48:leds.h        ****     set_dir_out(LED03);
  49:leds.h        ****     set_dir_out(LED04);
  50:leds.h        ****     set_dir_out(LED05);
  51:leds.h        ****     set_dir_out(LED06);
  52:leds.h        ****     set_dir_out(LED07);
  53:leds.h        ****     set_dir_out(LED08);
  54:leds.h        ****     set_dir_out(LED09);
  55:leds.h        ****     set_dir_out(LED10);
  56:leds.h        ****     set_dir_out(LED11);
  57:leds.h        ****     set_dir_out(LED12);
  58:leds.h        ****     set_dir_out(LED13);
  59:leds.h        ****     set_dir_out(LED14);
  60:leds.h        ****     set_dir_out(LED15);
  61:leds.h        ****     set_dir_out(LED16);
  62:leds.h        ****     set_dir_out(LED17);
  63:leds.h        ****     set_dir_out(LED18);
  64:leds.h        ****     set_dir_out(LED19);
  65:leds.h        ****     set_dir_out(LED20);
  66:leds.h        **** 
  67:leds.h        ****     LED_reset();
  68:leds.h        **** }
  69:leds.h        **** 
  70:leds.h        **** 
  71:leds.h        **** /**
  72:leds.h        ****     @brief  Reset all LED's to 0
  73:leds.h        ****     @param  none
  74:leds.h        ****     @return none
  75:leds.h        **** **/
  76:leds.h        **** void LED_reset(void)
  77:leds.h        **** {
  57               		.loc 3 77 0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  78:leds.h        ****     pin_low(LED01);
  63               		.loc 3 78 0
  64 001c C098      		cbi 0x18,0
  79:leds.h        ****     pin_low(LED02);
  65               		.loc 3 79 0
  66 001e C198      		cbi 0x18,1
  80:leds.h        ****     pin_low(LED03);
  67               		.loc 3 80 0
  68 0020 C298      		cbi 0x18,2
  81:leds.h        ****     pin_low(LED04);
  69               		.loc 3 81 0
  70 0022 C398      		cbi 0x18,3
  82:leds.h        ****     pin_low(LED05);
  71               		.loc 3 82 0
  72 0024 AF98      		cbi 0x15,7
  83:leds.h        ****     pin_low(LED06);
  73               		.loc 3 83 0
  74 0026 AE98      		cbi 0x15,6
  84:leds.h        ****     pin_low(LED07);
  75               		.loc 3 84 0
  76 0028 AD98      		cbi 0x15,5
  85:leds.h        ****     pin_low(LED08);
  77               		.loc 3 85 0
  78 002a 9098      		cbi 0x12,0
  86:leds.h        ****     pin_low(LED09);
  79               		.loc 3 86 0
  80 002c AC98      		cbi 0x15,4
  87:leds.h        ****     pin_low(LED10);
  81               		.loc 3 87 0
  82 002e 9198      		cbi 0x12,1
  88:leds.h        ****     pin_low(LED11);
  83               		.loc 3 88 0
  84 0030 AB98      		cbi 0x15,3
  89:leds.h        ****     pin_low(LED12);
  85               		.loc 3 89 0
  86 0032 9298      		cbi 0x12,2
  90:leds.h        ****     pin_low(LED13);
  87               		.loc 3 90 0
  88 0034 AA98      		cbi 0x15,2
  91:leds.h        ****     pin_low(LED14);
  89               		.loc 3 91 0
  90 0036 9398      		cbi 0x12,3
  92:leds.h        ****     pin_low(LED15);
  91               		.loc 3 92 0
  92 0038 A998      		cbi 0x15,1
  93:leds.h        ****     pin_low(LED16);
  93               		.loc 3 93 0
  94 003a 9498      		cbi 0x12,4
  94:leds.h        ****     pin_low(LED17);
  95               		.loc 3 94 0
  96 003c A898      		cbi 0x15,0
  95:leds.h        ****     pin_low(LED18);
  97               		.loc 3 95 0
  98 003e 9598      		cbi 0x12,5
  96:leds.h        ****     pin_low(LED19);
  99               		.loc 3 96 0
 100 0040 9798      		cbi 0x12,7
  97:leds.h        ****     pin_low(LED20);
 101               		.loc 3 97 0
 102 0042 9698      		cbi 0x12,6
 103 0044 0895      		ret
 104               		.cfi_endproc
 105               	.LFE8:
 107               	.global	LED_init
 109               	LED_init:
 110               	.LFB7:
  45:leds.h        **** {
 111               		.loc 3 45 0
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
  46:leds.h        ****     set_dir_out(LED01);
 117               		.loc 3 46 0
 118 0046 B89A      		sbi 0x17,0
  47:leds.h        ****     set_dir_out(LED02);
 119               		.loc 3 47 0
 120 0048 B99A      		sbi 0x17,1
  48:leds.h        ****     set_dir_out(LED03);
 121               		.loc 3 48 0
 122 004a BA9A      		sbi 0x17,2
  49:leds.h        ****     set_dir_out(LED04);
 123               		.loc 3 49 0
 124 004c BB9A      		sbi 0x17,3
  50:leds.h        ****     set_dir_out(LED05);
 125               		.loc 3 50 0
 126 004e A79A      		sbi 0x14,7
  51:leds.h        ****     set_dir_out(LED06);
 127               		.loc 3 51 0
 128 0050 A69A      		sbi 0x14,6
  52:leds.h        ****     set_dir_out(LED07);
 129               		.loc 3 52 0
 130 0052 A59A      		sbi 0x14,5
  53:leds.h        ****     set_dir_out(LED08);
 131               		.loc 3 53 0
 132 0054 889A      		sbi 0x11,0
  54:leds.h        ****     set_dir_out(LED09);
 133               		.loc 3 54 0
 134 0056 A49A      		sbi 0x14,4
  55:leds.h        ****     set_dir_out(LED10);
 135               		.loc 3 55 0
 136 0058 899A      		sbi 0x11,1
  56:leds.h        ****     set_dir_out(LED11);
 137               		.loc 3 56 0
 138 005a A39A      		sbi 0x14,3
  57:leds.h        ****     set_dir_out(LED12);
 139               		.loc 3 57 0
 140 005c 8A9A      		sbi 0x11,2
  58:leds.h        ****     set_dir_out(LED13);
 141               		.loc 3 58 0
 142 005e A29A      		sbi 0x14,2
  59:leds.h        ****     set_dir_out(LED14);
 143               		.loc 3 59 0
 144 0060 8B9A      		sbi 0x11,3
  60:leds.h        ****     set_dir_out(LED15);
 145               		.loc 3 60 0
 146 0062 A19A      		sbi 0x14,1
  61:leds.h        ****     set_dir_out(LED16);
 147               		.loc 3 61 0
 148 0064 8C9A      		sbi 0x11,4
  62:leds.h        ****     set_dir_out(LED17);
 149               		.loc 3 62 0
 150 0066 A09A      		sbi 0x14,0
  63:leds.h        ****     set_dir_out(LED18);
 151               		.loc 3 63 0
 152 0068 8D9A      		sbi 0x11,5
  64:leds.h        ****     set_dir_out(LED19);
 153               		.loc 3 64 0
 154 006a 8F9A      		sbi 0x11,7
  65:leds.h        ****     set_dir_out(LED20);
 155               		.loc 3 65 0
 156 006c 8E9A      		sbi 0x11,6
  67:leds.h        ****     LED_reset();
 157               		.loc 3 67 0
 158 006e 0C94 0000 		jmp LED_reset
 159               	.LVL3:
 160               		.cfi_endproc
 161               	.LFE7:
 163               	.global	lamptest
 165               	lamptest:
 166               	.LFB9:
  98:leds.h        **** }
  99:leds.h        **** 
 100:leds.h        **** 
 101:leds.h        **** /**
 102:leds.h        ****     @brief  Flash all LED's in series.
 103:leds.h        ****     @param  none
 104:leds.h        ****     @return none
 105:leds.h        **** */
 106:leds.h        **** void lamptest(void) {
 167               		.loc 3 106 0
 168               		.cfi_startproc
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 173               	.LVL4:
 107:leds.h        ****    int delay = 250;
 108:leds.h        **** 
 109:leds.h        ****    pin_high(LED01);
 174               		.loc 3 109 0
 175 0072 C09A      		sbi 0x18,0
 110:leds.h        ****    delay_ms(delay);
 176               		.loc 3 110 0
 177 0074 8AEF      		ldi r24,lo8(-6)
 178 0076 90E0      		ldi r25,0
 179 0078 0E94 0000 		call delay_ms
 180               	.LVL5:
 111:leds.h        ****    pin_low(LED01);
 181               		.loc 3 111 0
 182 007c C098      		cbi 0x18,0
 112:leds.h        **** 
 113:leds.h        ****    pin_high(LED02);
 183               		.loc 3 113 0
 184 007e C19A      		sbi 0x18,1
 114:leds.h        ****    delay_ms(delay);
 185               		.loc 3 114 0
 186 0080 8AEF      		ldi r24,lo8(-6)
 187 0082 90E0      		ldi r25,0
 188 0084 0E94 0000 		call delay_ms
 189               	.LVL6:
 115:leds.h        ****    pin_low(LED02);
 190               		.loc 3 115 0
 191 0088 C198      		cbi 0x18,1
 116:leds.h        **** 
 117:leds.h        ****    pin_high(LED03);
 192               		.loc 3 117 0
 193 008a C29A      		sbi 0x18,2
 118:leds.h        ****    delay_ms(delay);
 194               		.loc 3 118 0
 195 008c 8AEF      		ldi r24,lo8(-6)
 196 008e 90E0      		ldi r25,0
 197 0090 0E94 0000 		call delay_ms
 198               	.LVL7:
 119:leds.h        ****    pin_low(LED03);
 199               		.loc 3 119 0
 200 0094 C298      		cbi 0x18,2
 120:leds.h        **** 
 121:leds.h        ****    pin_high(LED04);
 201               		.loc 3 121 0
 202 0096 C39A      		sbi 0x18,3
 122:leds.h        ****    delay_ms(delay);
 203               		.loc 3 122 0
 204 0098 8AEF      		ldi r24,lo8(-6)
 205 009a 90E0      		ldi r25,0
 206 009c 0E94 0000 		call delay_ms
 207               	.LVL8:
 123:leds.h        ****    pin_low(LED04);
 208               		.loc 3 123 0
 209 00a0 C398      		cbi 0x18,3
 124:leds.h        **** 
 125:leds.h        ****    pin_high(LED05);
 210               		.loc 3 125 0
 211 00a2 AF9A      		sbi 0x15,7
 126:leds.h        ****    delay_ms(delay);
 212               		.loc 3 126 0
 213 00a4 8AEF      		ldi r24,lo8(-6)
 214 00a6 90E0      		ldi r25,0
 215 00a8 0E94 0000 		call delay_ms
 216               	.LVL9:
 127:leds.h        ****    pin_low(LED05);
 217               		.loc 3 127 0
 218 00ac AF98      		cbi 0x15,7
 128:leds.h        **** 
 129:leds.h        ****    pin_high(LED06);
 219               		.loc 3 129 0
 220 00ae AE9A      		sbi 0x15,6
 130:leds.h        ****    delay_ms(delay);
 221               		.loc 3 130 0
 222 00b0 8AEF      		ldi r24,lo8(-6)
 223 00b2 90E0      		ldi r25,0
 224 00b4 0E94 0000 		call delay_ms
 225               	.LVL10:
 131:leds.h        ****    pin_low(LED06);
 226               		.loc 3 131 0
 227 00b8 AE98      		cbi 0x15,6
 132:leds.h        **** 
 133:leds.h        ****    pin_high(LED07);
 228               		.loc 3 133 0
 229 00ba AD9A      		sbi 0x15,5
 134:leds.h        ****    delay_ms(delay);
 230               		.loc 3 134 0
 231 00bc 8AEF      		ldi r24,lo8(-6)
 232 00be 90E0      		ldi r25,0
 233 00c0 0E94 0000 		call delay_ms
 234               	.LVL11:
 135:leds.h        ****    pin_low(LED07);
 235               		.loc 3 135 0
 236 00c4 AD98      		cbi 0x15,5
 136:leds.h        **** 
 137:leds.h        ****    pin_high(LED08);
 237               		.loc 3 137 0
 238 00c6 909A      		sbi 0x12,0
 138:leds.h        ****    delay_ms(delay);
 239               		.loc 3 138 0
 240 00c8 8AEF      		ldi r24,lo8(-6)
 241 00ca 90E0      		ldi r25,0
 242 00cc 0E94 0000 		call delay_ms
 243               	.LVL12:
 139:leds.h        ****    pin_low(LED08);
 244               		.loc 3 139 0
 245 00d0 9098      		cbi 0x12,0
 140:leds.h        **** 
 141:leds.h        ****    pin_high(LED09);
 246               		.loc 3 141 0
 247 00d2 AC9A      		sbi 0x15,4
 142:leds.h        ****    delay_ms(delay);
 248               		.loc 3 142 0
 249 00d4 8AEF      		ldi r24,lo8(-6)
 250 00d6 90E0      		ldi r25,0
 251 00d8 0E94 0000 		call delay_ms
 252               	.LVL13:
 143:leds.h        ****    pin_low(LED09);
 253               		.loc 3 143 0
 254 00dc AC98      		cbi 0x15,4
 144:leds.h        **** 
 145:leds.h        ****    pin_high(LED10);
 255               		.loc 3 145 0
 256 00de 919A      		sbi 0x12,1
 146:leds.h        ****    delay_ms(delay);
 257               		.loc 3 146 0
 258 00e0 8AEF      		ldi r24,lo8(-6)
 259 00e2 90E0      		ldi r25,0
 260 00e4 0E94 0000 		call delay_ms
 261               	.LVL14:
 147:leds.h        ****    pin_low(LED10);
 262               		.loc 3 147 0
 263 00e8 9198      		cbi 0x12,1
 148:leds.h        **** 
 149:leds.h        ****    pin_high(LED11);
 264               		.loc 3 149 0
 265 00ea AB9A      		sbi 0x15,3
 150:leds.h        ****    delay_ms(delay);
 266               		.loc 3 150 0
 267 00ec 8AEF      		ldi r24,lo8(-6)
 268 00ee 90E0      		ldi r25,0
 269 00f0 0E94 0000 		call delay_ms
 270               	.LVL15:
 151:leds.h        ****    pin_low(LED11);
 271               		.loc 3 151 0
 272 00f4 AB98      		cbi 0x15,3
 152:leds.h        **** 
 153:leds.h        ****    pin_high(LED12);
 273               		.loc 3 153 0
 274 00f6 929A      		sbi 0x12,2
 154:leds.h        ****    delay_ms(delay);
 275               		.loc 3 154 0
 276 00f8 8AEF      		ldi r24,lo8(-6)
 277 00fa 90E0      		ldi r25,0
 278 00fc 0E94 0000 		call delay_ms
 279               	.LVL16:
 155:leds.h        ****    pin_low(LED12);
 280               		.loc 3 155 0
 281 0100 9298      		cbi 0x12,2
 156:leds.h        **** 
 157:leds.h        ****    pin_high(LED13);
 282               		.loc 3 157 0
 283 0102 AA9A      		sbi 0x15,2
 158:leds.h        ****    delay_ms(delay);
 284               		.loc 3 158 0
 285 0104 8AEF      		ldi r24,lo8(-6)
 286 0106 90E0      		ldi r25,0
 287 0108 0E94 0000 		call delay_ms
 288               	.LVL17:
 159:leds.h        ****    pin_low(LED13);
 289               		.loc 3 159 0
 290 010c AA98      		cbi 0x15,2
 160:leds.h        **** 
 161:leds.h        ****    pin_high(LED14);
 291               		.loc 3 161 0
 292 010e 939A      		sbi 0x12,3
 162:leds.h        ****    delay_ms(delay);
 293               		.loc 3 162 0
 294 0110 8AEF      		ldi r24,lo8(-6)
 295 0112 90E0      		ldi r25,0
 296 0114 0E94 0000 		call delay_ms
 297               	.LVL18:
 163:leds.h        ****    pin_low(LED14);
 298               		.loc 3 163 0
 299 0118 9398      		cbi 0x12,3
 164:leds.h        **** 
 165:leds.h        ****    pin_high(LED15);
 300               		.loc 3 165 0
 301 011a A99A      		sbi 0x15,1
 166:leds.h        ****    delay_ms(delay);
 302               		.loc 3 166 0
 303 011c 8AEF      		ldi r24,lo8(-6)
 304 011e 90E0      		ldi r25,0
 305 0120 0E94 0000 		call delay_ms
 306               	.LVL19:
 167:leds.h        ****    pin_low(LED15);
 307               		.loc 3 167 0
 308 0124 A998      		cbi 0x15,1
 168:leds.h        **** 
 169:leds.h        ****    pin_high(LED16);
 309               		.loc 3 169 0
 310 0126 949A      		sbi 0x12,4
 170:leds.h        ****    delay_ms(delay);
 311               		.loc 3 170 0
 312 0128 8AEF      		ldi r24,lo8(-6)
 313 012a 90E0      		ldi r25,0
 314 012c 0E94 0000 		call delay_ms
 315               	.LVL20:
 171:leds.h        ****    pin_low(LED16);
 316               		.loc 3 171 0
 317 0130 9498      		cbi 0x12,4
 172:leds.h        **** 
 173:leds.h        ****    pin_high(LED17);
 318               		.loc 3 173 0
 319 0132 A89A      		sbi 0x15,0
 174:leds.h        ****    delay_ms(delay);
 320               		.loc 3 174 0
 321 0134 8AEF      		ldi r24,lo8(-6)
 322 0136 90E0      		ldi r25,0
 323 0138 0E94 0000 		call delay_ms
 324               	.LVL21:
 175:leds.h        ****    pin_low(LED17);
 325               		.loc 3 175 0
 326 013c A898      		cbi 0x15,0
 176:leds.h        **** 
 177:leds.h        ****    pin_high(LED18);
 327               		.loc 3 177 0
 328 013e 959A      		sbi 0x12,5
 178:leds.h        ****    delay_ms(delay);
 329               		.loc 3 178 0
 330 0140 8AEF      		ldi r24,lo8(-6)
 331 0142 90E0      		ldi r25,0
 332 0144 0E94 0000 		call delay_ms
 333               	.LVL22:
 179:leds.h        ****    pin_low(LED18);
 334               		.loc 3 179 0
 335 0148 9598      		cbi 0x12,5
 180:leds.h        **** 
 181:leds.h        ****    pin_high(LED19);
 336               		.loc 3 181 0
 337 014a 979A      		sbi 0x12,7
 182:leds.h        ****    delay_ms(delay);
 338               		.loc 3 182 0
 339 014c 8AEF      		ldi r24,lo8(-6)
 340 014e 90E0      		ldi r25,0
 341 0150 0E94 0000 		call delay_ms
 342               	.LVL23:
 183:leds.h        ****    pin_low(LED19);
 343               		.loc 3 183 0
 344 0154 9798      		cbi 0x12,7
 184:leds.h        **** 
 185:leds.h        ****    pin_high(LED20);
 345               		.loc 3 185 0
 346 0156 969A      		sbi 0x12,6
 186:leds.h        ****    delay_ms(delay);
 347               		.loc 3 186 0
 348 0158 8AEF      		ldi r24,lo8(-6)
 349 015a 90E0      		ldi r25,0
 350 015c 0E94 0000 		call delay_ms
 351               	.LVL24:
 187:leds.h        ****    pin_low(LED20);
 352               		.loc 3 187 0
 353 0160 9698      		cbi 0x12,6
 354 0162 0895      		ret
 355               		.cfi_endproc
 356               	.LFE9:
 358               		.section	.text.startup,"ax",@progbits
 359               	.global	main
 361               	main:
 362               	.LFB10:
 363               		.file 4 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * main.c
   3:main.c        ****  *
   4:main.c        ****  * Angle of Attack Indicator
   5:main.c        ****  * =========================
   6:main.c        ****  *
   7:main.c        ****  * The AoA indicator module receives prussure data via UART from AoA sensor module. It converts
   8:main.c        ****  * these data into inH2O values used to drive a 20 unit LED bargraph.
   9:main.c        ****  *
  10:main.c        ****  * Florian Meissner
  11:main.c        ****  * n1990b@gmx.de
  12:main.c        ****  * February 2018
  13:main.c        ****  *
  14:main.c        ****  *
  15:main.c        ****  */
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** #ifndef F_CPU
  19:main.c        ****     #warning "Setting F_CPU to 1600000UL."
  20:main.c        ****     #define F_CPU 16000000UL
  21:main.c        **** #endif
  22:main.c        **** 
  23:main.c        **** #include <avr/io.h>
  24:main.c        **** #include <stdint.h>
  25:main.c        **** #include "delay_ms.h"
  26:main.c        **** #include "io.h"
  27:main.c        **** #include "leds.h"
  28:main.c        **** //~ #include "adc.h"
  29:main.c        **** //~ #include "version.h"
  30:main.c        **** 
  31:main.c        **** //~ #define VERSION 1.0 // Program version
  32:main.c        **** //~ #define SENSOR 0    // ADC channel
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** /**
  36:main.c        ****     @brief  Main program
  37:main.c        ****     @param  none
  38:main.c        ****     @return int
  39:main.c        **** **/
  40:main.c        **** int main(void)
  41:main.c        **** {
 364               		.loc 4 41 0
 365               		.cfi_startproc
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 0 */
 369               	.L__stack_usage = 0
  42:main.c        ****     //Initializers
  43:main.c        ****     LED_init();     // LED's
 370               		.loc 4 43 0
 371 0000 0E94 0000 		call LED_init
 372               	.LVL25:
  44:main.c        ****     //~ ADC_init();     // ADC
  45:main.c        **** 
  46:main.c        ****     // Output test run
  47:main.c        ****     lamptest();
 373               		.loc 4 47 0
 374 0004 0E94 0000 		call lamptest
 375               	.LVL26:
 376               	.L9:
 377 0008 00C0      		rjmp .L9
 378               		.cfi_endproc
 379               	.LFE10:
 381               		.text
 382               	.Letext0:
 383               		.file 5 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc8PzPeg.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc8PzPeg.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc8PzPeg.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc8PzPeg.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc8PzPeg.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc8PzPeg.s:12     .text:0000000000000000 delay_ms
     /tmp/cc8PzPeg.s:54     .text:000000000000001c LED_reset
     /tmp/cc8PzPeg.s:109    .text:0000000000000046 LED_init
     /tmp/cc8PzPeg.s:165    .text:0000000000000072 lamptest
     /tmp/cc8PzPeg.s:361    .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
