   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	delay_ms
  12               	delay_ms:
  13               	.LFB6:
  14               		.file 1 "delay_ms.h"
   1:delay_ms.h    **** /*
   2:delay_ms.h    **** ********************************************************************************
   3:delay_ms.h    **** *                                  delay_ms.h                                  *
   4:delay_ms.h    **** ********************************************************************************
   5:delay_ms.h    **** 
   6:delay_ms.h    **** 
   7:delay_ms.h    **** * INTRODUCTION
   8:delay_ms.h    **** * ------------
   9:delay_ms.h    **** *
  10:delay_ms.h    **** * The function calls the original _delay_ms() from util/delay.h for 1
  11:delay_ms.h    **** * millisecond and repeats that for the desired timespan.
  12:delay_ms.h    **** *
  13:delay_ms.h    **** *
  14:delay_ms.h    **** * SITE NOTICE
  15:delay_ms.h    **** * -----------
  16:delay_ms.h    **** *
  17:delay_ms.h    **** * Developer:    Florian Meissner
  18:delay_ms.h    **** *               n1990b@gmx.de
  19:delay_ms.h    **** * Version:      1.1
  20:delay_ms.h    **** * Release date: 05/05/2017
  21:delay_ms.h    **** *
  22:delay_ms.h    **** */
  23:delay_ms.h    **** 
  24:delay_ms.h    **** 
  25:delay_ms.h    **** #include <util/delay.h>
  26:delay_ms.h    **** 
  27:delay_ms.h    **** 
  28:delay_ms.h    **** /**
  29:delay_ms.h    ****     @brief  Delay program execution.
  30:delay_ms.h    ****     @param  uint16_t
  31:delay_ms.h    ****     @return none
  32:delay_ms.h    **** */
  33:delay_ms.h    **** void delay_ms(uint16_t ms)
  34:delay_ms.h    **** {
  15               		.loc 1 34 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  35:delay_ms.h    ****     uint16_t t=0;
  36:delay_ms.h    ****     for (t=0; t<=ms; t++) {
  22               		.loc 1 36 0
  23 0000 20E0      		ldi r18,0
  24 0002 30E0      		ldi r19,0
  25               	.LVL1:
  26               	.L3:
  27               	.LBB4:
  28               	.LBB5:
  29               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/avr/include/util/delay.h **** 
 153:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/avr/include/util/delay.h **** 
 156:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/avr/include/util/delay.h **** 
 159:/usr/lib/avr/include/util/delay.h **** 	#else
 160:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/avr/include/util/delay.h **** 	#endif
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  30               		.loc 2 164 0
  31 0004 EFE9      		ldi r30,lo8(3999)
  32 0006 FFE0      		ldi r31,hi8(3999)
  33 0008 3197      		1: sbiw r30,1
  34 000a 01F4      		brne 1b
  35 000c 00C0      		rjmp .
  36 000e 0000      		nop
  37               	.LBE5:
  38               	.LBE4:
  39               		.loc 1 36 0
  40 0010 2F5F      		subi r18,-1
  41 0012 3F4F      		sbci r19,-1
  42               	.LVL2:
  43 0014 8217      		cp r24,r18
  44 0016 9307      		cpc r25,r19
  45 0018 00F4      		brsh .L3
  46               	/* epilogue start */
  37:delay_ms.h    ****         _delay_ms(1);
  38:delay_ms.h    ****     }
  39:delay_ms.h    **** }
  47               		.loc 1 39 0
  48 001a 0895      		ret
  49               		.cfi_endproc
  50               	.LFE6:
  52               	.global	LED_reset
  54               	LED_reset:
  55               	.LFB8:
  56               		.file 3 "leds.h"
   1:leds.h        **** /*
   2:leds.h        ****  * leds.h
   3:leds.h        ****  *
   4:leds.h        ****  * LED definitions
   5:leds.h        ****  * ===============
   6:leds.h        ****  *
   7:leds.h        ****  * Defines functions to set and reset specific LED's.
   8:leds.h        ****  *
   9:leds.h        ****  *
  10:leds.h        ****  * Florian Meissner
  11:leds.h        ****  * n1990b@gmx.de
  12:leds.h        ****  * February 2018
  13:leds.h        ****  *
  14:leds.h        ****  */
  15:leds.h        **** 
  16:leds.h        **** 
  17:leds.h        **** #define LED01 B, PB0   // LED01, red
  18:leds.h        **** #define LED02 B, PB1   // LED02, red
  19:leds.h        **** #define LED03 B, PB2   // LED03, red
  20:leds.h        **** #define LED04 B, PB3   // LED04, red
  21:leds.h        **** #define LED05 C, PC7   // LED05, red
  22:leds.h        **** #define LED06 C, PC6   // LED06, yellow
  23:leds.h        **** #define LED07 C, PC5   // LED07, yellow
  24:leds.h        **** #define LED08 D, PD0   // LED08, yellow
  25:leds.h        **** #define LED09 C, PC4   // LED09, yellow
  26:leds.h        **** #define LED10 D, PD1   // LED10, yellow
  27:leds.h        **** #define LED11 C, PC3   // LED11, green
  28:leds.h        **** #define LED12 D, PD2   // LED12, green
  29:leds.h        **** #define LED13 C, PC2   // LED13, green
  30:leds.h        **** #define LED14 D, PD3   // LED14, green
  31:leds.h        **** #define LED15 C, PC1   // LED15, green
  32:leds.h        **** #define LED16 D, PD4   // LED16, green
  33:leds.h        **** #define LED17 C, PC0   // LED17, green
  34:leds.h        **** #define LED18 D, PD5   // LED18, green
  35:leds.h        **** #define LED19 D, PD7   // LED19, green
  36:leds.h        **** #define LED20 D, PD6   // LED20, green
  37:leds.h        **** 
  38:leds.h        **** 
  39:leds.h        **** // Prototype declarations
  40:leds.h        **** void LED_reset(void);
  41:leds.h        **** void LED_init(void);
  42:leds.h        **** 
  43:leds.h        **** 
  44:leds.h        **** /**
  45:leds.h        ****     @brief  Initialize all LED outputs.
  46:leds.h        ****     @param  none
  47:leds.h        ****     @return none
  48:leds.h        **** **/
  49:leds.h        **** void LED_init(void)
  50:leds.h        **** {
  51:leds.h        ****     set_dir_out(LED01);
  52:leds.h        ****     set_dir_out(LED02);
  53:leds.h        ****     set_dir_out(LED03);
  54:leds.h        ****     set_dir_out(LED04);
  55:leds.h        ****     set_dir_out(LED05);
  56:leds.h        ****     set_dir_out(LED06);
  57:leds.h        ****     set_dir_out(LED07);
  58:leds.h        ****     set_dir_out(LED08);
  59:leds.h        ****     set_dir_out(LED09);
  60:leds.h        ****     set_dir_out(LED10);
  61:leds.h        ****     set_dir_out(LED11);
  62:leds.h        ****     set_dir_out(LED12);
  63:leds.h        ****     set_dir_out(LED13);
  64:leds.h        ****     set_dir_out(LED14);
  65:leds.h        ****     set_dir_out(LED15);
  66:leds.h        ****     set_dir_out(LED16);
  67:leds.h        ****     set_dir_out(LED17);
  68:leds.h        ****     set_dir_out(LED18);
  69:leds.h        ****     set_dir_out(LED19);
  70:leds.h        ****     set_dir_out(LED20);
  71:leds.h        **** 
  72:leds.h        ****     LED_reset();
  73:leds.h        **** }
  74:leds.h        **** 
  75:leds.h        **** 
  76:leds.h        **** /**
  77:leds.h        ****     @brief  Reset all LED's to 0
  78:leds.h        ****     @param  none
  79:leds.h        ****     @return none
  80:leds.h        **** **/
  81:leds.h        **** void LED_reset(void)
  82:leds.h        **** {
  57               		.loc 3 82 0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  83:leds.h        ****     pin_low(LED01);
  63               		.loc 3 83 0
  64 001c C098      		cbi 0x18,0
  84:leds.h        ****     pin_low(LED02);
  65               		.loc 3 84 0
  66 001e C198      		cbi 0x18,1
  85:leds.h        ****     pin_low(LED03);
  67               		.loc 3 85 0
  68 0020 C298      		cbi 0x18,2
  86:leds.h        ****     pin_low(LED04);
  69               		.loc 3 86 0
  70 0022 C398      		cbi 0x18,3
  87:leds.h        ****     pin_low(LED05);
  71               		.loc 3 87 0
  72 0024 AF98      		cbi 0x15,7
  88:leds.h        ****     pin_low(LED06);
  73               		.loc 3 88 0
  74 0026 AE98      		cbi 0x15,6
  89:leds.h        ****     pin_low(LED07);
  75               		.loc 3 89 0
  76 0028 AD98      		cbi 0x15,5
  90:leds.h        ****     pin_low(LED08);
  77               		.loc 3 90 0
  78 002a 9098      		cbi 0x12,0
  91:leds.h        ****     pin_low(LED09);
  79               		.loc 3 91 0
  80 002c AC98      		cbi 0x15,4
  92:leds.h        ****     pin_low(LED10);
  81               		.loc 3 92 0
  82 002e 9198      		cbi 0x12,1
  93:leds.h        ****     pin_low(LED11);
  83               		.loc 3 93 0
  84 0030 AB98      		cbi 0x15,3
  94:leds.h        ****     pin_low(LED12);
  85               		.loc 3 94 0
  86 0032 9298      		cbi 0x12,2
  95:leds.h        ****     pin_low(LED13);
  87               		.loc 3 95 0
  88 0034 AA98      		cbi 0x15,2
  96:leds.h        ****     pin_low(LED14);
  89               		.loc 3 96 0
  90 0036 9398      		cbi 0x12,3
  97:leds.h        ****     pin_low(LED15);
  91               		.loc 3 97 0
  92 0038 A998      		cbi 0x15,1
  98:leds.h        ****     pin_low(LED16);
  93               		.loc 3 98 0
  94 003a 9498      		cbi 0x12,4
  99:leds.h        ****     pin_low(LED17);
  95               		.loc 3 99 0
  96 003c A898      		cbi 0x15,0
 100:leds.h        ****     pin_low(LED18);
  97               		.loc 3 100 0
  98 003e 9598      		cbi 0x12,5
 101:leds.h        ****     pin_low(LED19);
  99               		.loc 3 101 0
 100 0040 9798      		cbi 0x12,7
 102:leds.h        ****     pin_low(LED20);
 101               		.loc 3 102 0
 102 0042 9698      		cbi 0x12,6
 103 0044 0895      		ret
 104               		.cfi_endproc
 105               	.LFE8:
 107               	.global	LED_init
 109               	LED_init:
 110               	.LFB7:
  50:leds.h        **** {
 111               		.loc 3 50 0
 112               		.cfi_startproc
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
  51:leds.h        ****     set_dir_out(LED01);
 117               		.loc 3 51 0
 118 0046 B89A      		sbi 0x17,0
  52:leds.h        ****     set_dir_out(LED02);
 119               		.loc 3 52 0
 120 0048 B99A      		sbi 0x17,1
  53:leds.h        ****     set_dir_out(LED03);
 121               		.loc 3 53 0
 122 004a BA9A      		sbi 0x17,2
  54:leds.h        ****     set_dir_out(LED04);
 123               		.loc 3 54 0
 124 004c BB9A      		sbi 0x17,3
  55:leds.h        ****     set_dir_out(LED05);
 125               		.loc 3 55 0
 126 004e A79A      		sbi 0x14,7
  56:leds.h        ****     set_dir_out(LED06);
 127               		.loc 3 56 0
 128 0050 A69A      		sbi 0x14,6
  57:leds.h        ****     set_dir_out(LED07);
 129               		.loc 3 57 0
 130 0052 A59A      		sbi 0x14,5
  58:leds.h        ****     set_dir_out(LED08);
 131               		.loc 3 58 0
 132 0054 889A      		sbi 0x11,0
  59:leds.h        ****     set_dir_out(LED09);
 133               		.loc 3 59 0
 134 0056 A49A      		sbi 0x14,4
  60:leds.h        ****     set_dir_out(LED10);
 135               		.loc 3 60 0
 136 0058 899A      		sbi 0x11,1
  61:leds.h        ****     set_dir_out(LED11);
 137               		.loc 3 61 0
 138 005a A39A      		sbi 0x14,3
  62:leds.h        ****     set_dir_out(LED12);
 139               		.loc 3 62 0
 140 005c 8A9A      		sbi 0x11,2
  63:leds.h        ****     set_dir_out(LED13);
 141               		.loc 3 63 0
 142 005e A29A      		sbi 0x14,2
  64:leds.h        ****     set_dir_out(LED14);
 143               		.loc 3 64 0
 144 0060 8B9A      		sbi 0x11,3
  65:leds.h        ****     set_dir_out(LED15);
 145               		.loc 3 65 0
 146 0062 A19A      		sbi 0x14,1
  66:leds.h        ****     set_dir_out(LED16);
 147               		.loc 3 66 0
 148 0064 8C9A      		sbi 0x11,4
  67:leds.h        ****     set_dir_out(LED17);
 149               		.loc 3 67 0
 150 0066 A09A      		sbi 0x14,0
  68:leds.h        ****     set_dir_out(LED18);
 151               		.loc 3 68 0
 152 0068 8D9A      		sbi 0x11,5
  69:leds.h        ****     set_dir_out(LED19);
 153               		.loc 3 69 0
 154 006a 8F9A      		sbi 0x11,7
  70:leds.h        ****     set_dir_out(LED20);
 155               		.loc 3 70 0
 156 006c 8E9A      		sbi 0x11,6
  72:leds.h        ****     LED_reset();
 157               		.loc 3 72 0
 158 006e 0C94 0000 		jmp LED_reset
 159               	.LVL3:
 160               		.cfi_endproc
 161               	.LFE7:
 163               	.global	lamptest
 165               	lamptest:
 166               	.LFB9:
 103:leds.h        **** }
 104:leds.h        **** 
 105:leds.h        **** 
 106:leds.h        **** /**
 107:leds.h        ****     @brief  Flash all LED's in series.
 108:leds.h        ****     @param  none
 109:leds.h        ****     @return none
 110:leds.h        **** */
 111:leds.h        **** void lamptest(void) {
 167               		.loc 3 111 0
 168               		.cfi_startproc
 169               	/* prologue: function */
 170               	/* frame size = 0 */
 171               	/* stack size = 0 */
 172               	.L__stack_usage = 0
 173               	.LVL4:
 112:leds.h        ****    int delay = 250;
 113:leds.h        **** 
 114:leds.h        ****    pin_high(LED01);
 174               		.loc 3 114 0
 175 0072 C09A      		sbi 0x18,0
 115:leds.h        ****    delay_ms(delay);
 176               		.loc 3 115 0
 177 0074 8AEF      		ldi r24,lo8(-6)
 178 0076 90E0      		ldi r25,0
 179 0078 0E94 0000 		call delay_ms
 180               	.LVL5:
 116:leds.h        ****    pin_low(LED01);
 181               		.loc 3 116 0
 182 007c C098      		cbi 0x18,0
 117:leds.h        **** 
 118:leds.h        ****    pin_high(LED02);
 183               		.loc 3 118 0
 184 007e C19A      		sbi 0x18,1
 119:leds.h        ****    delay_ms(delay);
 185               		.loc 3 119 0
 186 0080 8AEF      		ldi r24,lo8(-6)
 187 0082 90E0      		ldi r25,0
 188 0084 0E94 0000 		call delay_ms
 189               	.LVL6:
 120:leds.h        ****    pin_low(LED02);
 190               		.loc 3 120 0
 191 0088 C198      		cbi 0x18,1
 121:leds.h        **** 
 122:leds.h        ****    pin_high(LED03);
 192               		.loc 3 122 0
 193 008a C29A      		sbi 0x18,2
 123:leds.h        ****    delay_ms(delay);
 194               		.loc 3 123 0
 195 008c 8AEF      		ldi r24,lo8(-6)
 196 008e 90E0      		ldi r25,0
 197 0090 0E94 0000 		call delay_ms
 198               	.LVL7:
 124:leds.h        ****    pin_low(LED03);
 199               		.loc 3 124 0
 200 0094 C298      		cbi 0x18,2
 125:leds.h        **** 
 126:leds.h        ****    pin_high(LED04);
 201               		.loc 3 126 0
 202 0096 C39A      		sbi 0x18,3
 127:leds.h        ****    delay_ms(delay);
 203               		.loc 3 127 0
 204 0098 8AEF      		ldi r24,lo8(-6)
 205 009a 90E0      		ldi r25,0
 206 009c 0E94 0000 		call delay_ms
 207               	.LVL8:
 128:leds.h        ****    pin_low(LED04);
 208               		.loc 3 128 0
 209 00a0 C398      		cbi 0x18,3
 129:leds.h        **** 
 130:leds.h        ****    pin_high(LED05);
 210               		.loc 3 130 0
 211 00a2 AF9A      		sbi 0x15,7
 131:leds.h        ****    delay_ms(delay);
 212               		.loc 3 131 0
 213 00a4 8AEF      		ldi r24,lo8(-6)
 214 00a6 90E0      		ldi r25,0
 215 00a8 0E94 0000 		call delay_ms
 216               	.LVL9:
 132:leds.h        ****    pin_low(LED05);
 217               		.loc 3 132 0
 218 00ac AF98      		cbi 0x15,7
 133:leds.h        **** 
 134:leds.h        ****    pin_high(LED06);
 219               		.loc 3 134 0
 220 00ae AE9A      		sbi 0x15,6
 135:leds.h        ****    delay_ms(delay);
 221               		.loc 3 135 0
 222 00b0 8AEF      		ldi r24,lo8(-6)
 223 00b2 90E0      		ldi r25,0
 224 00b4 0E94 0000 		call delay_ms
 225               	.LVL10:
 136:leds.h        ****    pin_low(LED06);
 226               		.loc 3 136 0
 227 00b8 AE98      		cbi 0x15,6
 137:leds.h        **** 
 138:leds.h        ****    pin_high(LED07);
 228               		.loc 3 138 0
 229 00ba AD9A      		sbi 0x15,5
 139:leds.h        ****    delay_ms(delay);
 230               		.loc 3 139 0
 231 00bc 8AEF      		ldi r24,lo8(-6)
 232 00be 90E0      		ldi r25,0
 233 00c0 0E94 0000 		call delay_ms
 234               	.LVL11:
 140:leds.h        ****    pin_low(LED07);
 235               		.loc 3 140 0
 236 00c4 AD98      		cbi 0x15,5
 141:leds.h        **** 
 142:leds.h        ****    pin_high(LED08);
 237               		.loc 3 142 0
 238 00c6 909A      		sbi 0x12,0
 143:leds.h        ****    delay_ms(delay);
 239               		.loc 3 143 0
 240 00c8 8AEF      		ldi r24,lo8(-6)
 241 00ca 90E0      		ldi r25,0
 242 00cc 0E94 0000 		call delay_ms
 243               	.LVL12:
 144:leds.h        ****    pin_low(LED08);
 244               		.loc 3 144 0
 245 00d0 9098      		cbi 0x12,0
 145:leds.h        **** 
 146:leds.h        ****    pin_high(LED09);
 246               		.loc 3 146 0
 247 00d2 AC9A      		sbi 0x15,4
 147:leds.h        ****    delay_ms(delay);
 248               		.loc 3 147 0
 249 00d4 8AEF      		ldi r24,lo8(-6)
 250 00d6 90E0      		ldi r25,0
 251 00d8 0E94 0000 		call delay_ms
 252               	.LVL13:
 148:leds.h        ****    pin_low(LED09);
 253               		.loc 3 148 0
 254 00dc AC98      		cbi 0x15,4
 149:leds.h        **** 
 150:leds.h        ****    pin_high(LED10);
 255               		.loc 3 150 0
 256 00de 919A      		sbi 0x12,1
 151:leds.h        ****    delay_ms(delay);
 257               		.loc 3 151 0
 258 00e0 8AEF      		ldi r24,lo8(-6)
 259 00e2 90E0      		ldi r25,0
 260 00e4 0E94 0000 		call delay_ms
 261               	.LVL14:
 152:leds.h        ****    pin_low(LED10);
 262               		.loc 3 152 0
 263 00e8 9198      		cbi 0x12,1
 153:leds.h        **** 
 154:leds.h        ****    pin_high(LED11);
 264               		.loc 3 154 0
 265 00ea AB9A      		sbi 0x15,3
 155:leds.h        ****    delay_ms(delay);
 266               		.loc 3 155 0
 267 00ec 8AEF      		ldi r24,lo8(-6)
 268 00ee 90E0      		ldi r25,0
 269 00f0 0E94 0000 		call delay_ms
 270               	.LVL15:
 156:leds.h        ****    pin_low(LED11);
 271               		.loc 3 156 0
 272 00f4 AB98      		cbi 0x15,3
 157:leds.h        **** 
 158:leds.h        ****    pin_high(LED12);
 273               		.loc 3 158 0
 274 00f6 929A      		sbi 0x12,2
 159:leds.h        ****    delay_ms(delay);
 275               		.loc 3 159 0
 276 00f8 8AEF      		ldi r24,lo8(-6)
 277 00fa 90E0      		ldi r25,0
 278 00fc 0E94 0000 		call delay_ms
 279               	.LVL16:
 160:leds.h        ****    pin_low(LED12);
 280               		.loc 3 160 0
 281 0100 9298      		cbi 0x12,2
 161:leds.h        **** 
 162:leds.h        ****    pin_high(LED13);
 282               		.loc 3 162 0
 283 0102 AA9A      		sbi 0x15,2
 163:leds.h        ****    delay_ms(delay);
 284               		.loc 3 163 0
 285 0104 8AEF      		ldi r24,lo8(-6)
 286 0106 90E0      		ldi r25,0
 287 0108 0E94 0000 		call delay_ms
 288               	.LVL17:
 164:leds.h        ****    pin_low(LED13);
 289               		.loc 3 164 0
 290 010c AA98      		cbi 0x15,2
 165:leds.h        **** 
 166:leds.h        ****    pin_high(LED14);
 291               		.loc 3 166 0
 292 010e 939A      		sbi 0x12,3
 167:leds.h        ****    delay_ms(delay);
 293               		.loc 3 167 0
 294 0110 8AEF      		ldi r24,lo8(-6)
 295 0112 90E0      		ldi r25,0
 296 0114 0E94 0000 		call delay_ms
 297               	.LVL18:
 168:leds.h        ****    pin_low(LED14);
 298               		.loc 3 168 0
 299 0118 9398      		cbi 0x12,3
 169:leds.h        **** 
 170:leds.h        ****    pin_high(LED15);
 300               		.loc 3 170 0
 301 011a A99A      		sbi 0x15,1
 171:leds.h        ****    delay_ms(delay);
 302               		.loc 3 171 0
 303 011c 8AEF      		ldi r24,lo8(-6)
 304 011e 90E0      		ldi r25,0
 305 0120 0E94 0000 		call delay_ms
 306               	.LVL19:
 172:leds.h        ****    pin_low(LED15);
 307               		.loc 3 172 0
 308 0124 A998      		cbi 0x15,1
 173:leds.h        **** 
 174:leds.h        ****    pin_high(LED16);
 309               		.loc 3 174 0
 310 0126 949A      		sbi 0x12,4
 175:leds.h        ****    delay_ms(delay);
 311               		.loc 3 175 0
 312 0128 8AEF      		ldi r24,lo8(-6)
 313 012a 90E0      		ldi r25,0
 314 012c 0E94 0000 		call delay_ms
 315               	.LVL20:
 176:leds.h        ****    pin_low(LED16);
 316               		.loc 3 176 0
 317 0130 9498      		cbi 0x12,4
 177:leds.h        **** 
 178:leds.h        ****    pin_high(LED17);
 318               		.loc 3 178 0
 319 0132 A89A      		sbi 0x15,0
 179:leds.h        ****    delay_ms(delay);
 320               		.loc 3 179 0
 321 0134 8AEF      		ldi r24,lo8(-6)
 322 0136 90E0      		ldi r25,0
 323 0138 0E94 0000 		call delay_ms
 324               	.LVL21:
 180:leds.h        ****    pin_low(LED17);
 325               		.loc 3 180 0
 326 013c A898      		cbi 0x15,0
 181:leds.h        **** 
 182:leds.h        ****    pin_high(LED18);
 327               		.loc 3 182 0
 328 013e 959A      		sbi 0x12,5
 183:leds.h        ****    delay_ms(delay);
 329               		.loc 3 183 0
 330 0140 8AEF      		ldi r24,lo8(-6)
 331 0142 90E0      		ldi r25,0
 332 0144 0E94 0000 		call delay_ms
 333               	.LVL22:
 184:leds.h        ****    pin_low(LED18);
 334               		.loc 3 184 0
 335 0148 9598      		cbi 0x12,5
 185:leds.h        **** 
 186:leds.h        ****    pin_high(LED19);
 336               		.loc 3 186 0
 337 014a 979A      		sbi 0x12,7
 187:leds.h        ****    delay_ms(delay);
 338               		.loc 3 187 0
 339 014c 8AEF      		ldi r24,lo8(-6)
 340 014e 90E0      		ldi r25,0
 341 0150 0E94 0000 		call delay_ms
 342               	.LVL23:
 188:leds.h        ****    pin_low(LED19);
 343               		.loc 3 188 0
 344 0154 9798      		cbi 0x12,7
 189:leds.h        **** 
 190:leds.h        ****    pin_high(LED20);
 345               		.loc 3 190 0
 346 0156 969A      		sbi 0x12,6
 191:leds.h        ****    delay_ms(delay);
 347               		.loc 3 191 0
 348 0158 8AEF      		ldi r24,lo8(-6)
 349 015a 90E0      		ldi r25,0
 350 015c 0E94 0000 		call delay_ms
 351               	.LVL24:
 192:leds.h        ****    pin_low(LED20);
 352               		.loc 3 192 0
 353 0160 9698      		cbi 0x12,6
 354 0162 0895      		ret
 355               		.cfi_endproc
 356               	.LFE9:
 358               	.global	ADC_init
 360               	ADC_init:
 361               	.LFB10:
 362               		.file 4 "adc.h"
   1:adc.h         **** /*
   2:adc.h         ****  * adc.h
   3:adc.h         ****  *
   4:adc.h         ****  * Analogue-Digital-Converter functions
   5:adc.h         ****  * ====================================
   6:adc.h         ****  *
   7:adc.h         ****  *
   8:adc.h         ****  * collection of functions used for ADC operations. Taylored to AtMEGA16.
   9:adc.h         ****  *
  10:adc.h         ****  *
  11:adc.h         ****  * Florian Meissner
  12:adc.h         ****  * n1990b@gmx.de
  13:adc.h         ****  * February 2018
  14:adc.h         ****  *
  15:adc.h         ****  */
  16:adc.h         **** 
  17:adc.h         **** 
  18:adc.h         **** /**
  19:adc.h         ****     @brief  Initialize ADC.
  20:adc.h         ****     @param  none
  21:adc.h         ****     @return none
  22:adc.h         **** **/
  23:adc.h         **** void ADC_init(void)
  24:adc.h         **** {
 363               		.loc 4 24 0
 364               		.cfi_startproc
 365               	/* prologue: function */
 366               	/* frame size = 0 */
 367               	/* stack size = 0 */
 368               	.L__stack_usage = 0
  25:adc.h         ****     // Set AVCC as reference voltage.
  26:adc.h         ****     ADMUX = (1<<REFS0);
 369               		.loc 4 26 0
 370 0164 80E4      		ldi r24,lo8(64)
 371 0166 87B9      		out 0x7,r24
  27:adc.h         ****     ADMUX &= ~(1<<REFS1);
 372               		.loc 4 27 0
 373 0168 3F98      		cbi 0x7,7
  28:adc.h         **** 
  29:adc.h         ****     // Right adjust result
  30:adc.h         ****     ADMUX &= ~(1<<ADLAR);
 374               		.loc 4 30 0
 375 016a 3D98      		cbi 0x7,5
  31:adc.h         **** 
  32:adc.h         ****     // Disable auto trigger mode
  33:adc.h         ****     ADCSRA &= ~(1<<ADATE);
 376               		.loc 4 33 0
 377 016c 3598      		cbi 0x6,5
  34:adc.h         **** 
  35:adc.h         ****     // Select frequency prescaler
  36:adc.h         ****     ADCSRA |= (1<<ADPS2);
 378               		.loc 4 36 0
 379 016e 329A      		sbi 0x6,2
  37:adc.h         ****     ADCSRA |= (1<<ADPS1);
 380               		.loc 4 37 0
 381 0170 319A      		sbi 0x6,1
  38:adc.h         ****     ADCSRA |= (1<<ADPS0);
 382               		.loc 4 38 0
 383 0172 309A      		sbi 0x6,0
  39:adc.h         **** 
  40:adc.h         ****     // Enable ADC
  41:adc.h         ****     ADCSRA |= (1<<ADEN);
 384               		.loc 4 41 0
 385 0174 379A      		sbi 0x6,7
  42:adc.h         **** 
  43:adc.h         ****     // Dummy readout
  44:adc.h         ****     ADCSRA |= (1<<ADSC);
 386               		.loc 4 44 0
 387 0176 369A      		sbi 0x6,6
 388               	.L10:
  45:adc.h         ****     while (ADCSRA & (1<<ADSC)) {
 389               		.loc 4 45 0 discriminator 1
 390 0178 3699      		sbic 0x6,6
 391 017a 00C0      		rjmp .L10
  46:adc.h         ****     }
  47:adc.h         ****     (void) ADCW;
 392               		.loc 4 47 0
 393 017c 84B1      		in r24,0x4
 394 017e 95B1      		in r25,0x4+1
 395 0180 0895      		ret
 396               		.cfi_endproc
 397               	.LFE10:
 399               	.global	ADC_Read
 401               	ADC_Read:
 402               	.LFB11:
  48:adc.h         **** }
  49:adc.h         **** 
  50:adc.h         **** 
  51:adc.h         **** /**
  52:adc.h         ****     @brief  Read one value from specified channel.
  53:adc.h         ****     @param  uint8_t channel
  54:adc.h         ****     @return uint16_t adc_conversion
  55:adc.h         **** **/
  56:adc.h         **** uint16_t ADC_Read(uint8_t channel)
  57:adc.h         **** {
 403               		.loc 4 57 0
 404               		.cfi_startproc
 405               	.LVL25:
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 0 */
 409               	.L__stack_usage = 0
  58:adc.h         ****     //Select channel
  59:adc.h         ****     ADMUX = (ADMUX & ~(0x1F)) | (channel & 0x1F);
 410               		.loc 4 59 0
 411 0182 97B1      		in r25,0x7
 412 0184 8F71      		andi r24,lo8(31)
 413               	.LVL26:
 414 0186 907E      		andi r25,lo8(-32)
 415 0188 892B      		or r24,r25
 416 018a 87B9      		out 0x7,r24
  60:adc.h         **** 
  61:adc.h         ****     // run single conversion
  62:adc.h         ****     ADCSRA |= (1<<ADSC);
 417               		.loc 4 62 0
 418 018c 369A      		sbi 0x6,6
 419               	.L13:
  63:adc.h         ****     while (ADCSRA & (1<<ADSC)) {
 420               		.loc 4 63 0 discriminator 1
 421 018e 3699      		sbic 0x6,6
 422 0190 00C0      		rjmp .L13
  64:adc.h         ****     }
  65:adc.h         ****     return ADCW;
 423               		.loc 4 65 0
 424 0192 84B1      		in r24,0x4
 425 0194 95B1      		in r25,0x4+1
  66:adc.h         **** }
 426               		.loc 4 66 0
 427 0196 0895      		ret
 428               		.cfi_endproc
 429               	.LFE11:
 431               	.global	ADC_Read_Avg
 433               	ADC_Read_Avg:
 434               	.LFB12:
  67:adc.h         **** 
  68:adc.h         **** 
  69:adc.h         **** /**
  70:adc.h         ****     @brief  Read specified amount of values from ADC and return avarage.
  71:adc.h         ****     @param  uint8_t channel
  72:adc.h         ****             uint8_t samples
  73:adc.h         ****     @return uint16_t adc_avg
  74:adc.h         **** **/
  75:adc.h         **** uint16_t ADC_Read_Avg(uint8_t channel, uint8_t samples)
  76:adc.h         **** {
 435               		.loc 4 76 0
 436               		.cfi_startproc
 437               	.LVL27:
 438 0198 CF92      		push r12
 439               	.LCFI0:
 440               		.cfi_def_cfa_offset 3
 441               		.cfi_offset 12, -2
 442 019a DF92      		push r13
 443               	.LCFI1:
 444               		.cfi_def_cfa_offset 4
 445               		.cfi_offset 13, -3
 446 019c EF92      		push r14
 447               	.LCFI2:
 448               		.cfi_def_cfa_offset 5
 449               		.cfi_offset 14, -4
 450 019e FF92      		push r15
 451               	.LCFI3:
 452               		.cfi_def_cfa_offset 6
 453               		.cfi_offset 15, -5
 454 01a0 0F93      		push r16
 455               	.LCFI4:
 456               		.cfi_def_cfa_offset 7
 457               		.cfi_offset 16, -6
 458 01a2 1F93      		push r17
 459               	.LCFI5:
 460               		.cfi_def_cfa_offset 8
 461               		.cfi_offset 17, -7
 462 01a4 CF93      		push r28
 463               	.LCFI6:
 464               		.cfi_def_cfa_offset 9
 465               		.cfi_offset 28, -8
 466 01a6 DF93      		push r29
 467               	.LCFI7:
 468               		.cfi_def_cfa_offset 10
 469               		.cfi_offset 29, -9
 470 01a8 1F92      		push __zero_reg__
 471               	.LCFI8:
 472               		.cfi_def_cfa_offset 11
 473 01aa CDB7      		in r28,__SP_L__
 474 01ac DEB7      		in r29,__SP_H__
 475               	.LCFI9:
 476               		.cfi_def_cfa_register 28
 477               	/* prologue: function */
 478               	/* frame size = 1 */
 479               	/* stack size = 9 */
 480               	.L__stack_usage = 9
 481 01ae 182F      		mov r17,r24
 482               	.LVL28:
 483               	.LBB6:
  77:adc.h         ****     uint32_t sum = 0;
  78:adc.h         ****     for (uint8_t i=0; i<samples; ++i) {
 484               		.loc 4 78 0
 485 01b0 00E0      		ldi r16,0
 486               	.LBE6:
  77:adc.h         ****     uint32_t sum = 0;
 487               		.loc 4 77 0
 488 01b2 C12C      		mov r12,__zero_reg__
 489 01b4 D12C      		mov r13,__zero_reg__
 490 01b6 7601      		movw r14,r12
 491               	.LVL29:
 492               	.L15:
 493               	.LBB7:
 494               		.loc 4 78 0 discriminator 1
 495 01b8 0617      		cp r16,r22
 496 01ba 01F0      		breq .L17
  79:adc.h         ****         sum += ADC_Read(channel);
 497               		.loc 4 79 0 discriminator 2
 498 01bc 812F      		mov r24,r17
 499 01be 6983      		std Y+1,r22
 500 01c0 0E94 0000 		call ADC_Read
 501               	.LVL30:
 502 01c4 C80E      		add r12,r24
 503 01c6 D91E      		adc r13,r25
 504 01c8 E11C      		adc r14,__zero_reg__
 505 01ca F11C      		adc r15,__zero_reg__
 506               	.LVL31:
  78:adc.h         ****     for (uint8_t i=0; i<samples; ++i) {
 507               		.loc 4 78 0 discriminator 2
 508 01cc 0F5F      		subi r16,lo8(-(1))
 509               	.LVL32:
 510 01ce 6981      		ldd r22,Y+1
 511 01d0 00C0      		rjmp .L15
 512               	.L17:
 513               	.LVL33:
 514               	.LBE7:
  80:adc.h         ****     }
  81:adc.h         ****     uint16_t adc_avg = sum / samples;
 515               		.loc 4 81 0
 516 01d2 202F      		mov r18,r16
 517 01d4 30E0      		ldi r19,0
 518 01d6 40E0      		ldi r20,0
 519 01d8 50E0      		ldi r21,0
 520 01da C701      		movw r24,r14
 521 01dc B601      		movw r22,r12
 522 01de 0E94 0000 		call __udivmodsi4
  82:adc.h         ****     return adc_avg;
  83:adc.h         **** }
 523               		.loc 4 83 0
 524 01e2 C901      		movw r24,r18
 525               	/* epilogue start */
 526 01e4 0F90      		pop __tmp_reg__
 527 01e6 DF91      		pop r29
 528 01e8 CF91      		pop r28
 529 01ea 1F91      		pop r17
 530               	.LVL34:
 531 01ec 0F91      		pop r16
 532               	.LVL35:
 533 01ee FF90      		pop r15
 534 01f0 EF90      		pop r14
 535 01f2 DF90      		pop r13
 536 01f4 CF90      		pop r12
 537               	.LVL36:
 538 01f6 0895      		ret
 539               		.cfi_endproc
 540               	.LFE12:
 542               	.global	__fixunssfsi
 543               	.global	__floatsisf
 544               	.global	__subsf3
 545               	.global	__mulsf3
 546               	.global	version
 548               	version:
 549               	.LFB13:
 550               		.file 5 "version.h"
   1:version.h     **** /*
   2:version.h     ****  * version.h
   3:version.h     ****  *
   4:version.h     ****  * Output Software Version
   5:version.h     ****  * =======================
   6:version.h     ****  *
   7:version.h     ****  *
   8:version.h     ****  * Show's software version on LED's.
   9:version.h     ****  *
  10:version.h     ****  * Green LED's will show major version as single LED from ground up. (LED11-20).
  11:version.h     ****  * Yellow and red LED's show subversion in the same way (LED01-10).
  12:version.h     ****  *
  13:version.h     ****  *
  14:version.h     ****  * Florian Meissner
  15:version.h     ****  * n1990b@gmx.de
  16:version.h     ****  * February 2018
  17:version.h     ****  *
  18:version.h     ****  */
  19:version.h     **** 
  20:version.h     **** 
  21:version.h     **** /**
  22:version.h     ****     @brief  Display software version on LED's.
  23:version.h     ****     @param  float version
  24:version.h     ****     @return none
  25:version.h     **** **/
  26:version.h     **** void version(float version)
  27:version.h     **** {
 551               		.loc 5 27 0
 552               		.cfi_startproc
 553               	.LVL37:
 554 01f8 CF92      		push r12
 555               	.LCFI10:
 556               		.cfi_def_cfa_offset 3
 557               		.cfi_offset 12, -2
 558 01fa DF92      		push r13
 559               	.LCFI11:
 560               		.cfi_def_cfa_offset 4
 561               		.cfi_offset 13, -3
 562 01fc EF92      		push r14
 563               	.LCFI12:
 564               		.cfi_def_cfa_offset 5
 565               		.cfi_offset 14, -4
 566 01fe FF92      		push r15
 567               	.LCFI13:
 568               		.cfi_def_cfa_offset 6
 569               		.cfi_offset 15, -5
 570 0200 CF93      		push r28
 571               	.LCFI14:
 572               		.cfi_def_cfa_offset 7
 573               		.cfi_offset 28, -6
 574               	/* prologue: function */
 575               	/* frame size = 0 */
 576               	/* stack size = 5 */
 577               	.L__stack_usage = 5
 578 0202 6B01      		movw r12,r22
 579 0204 7C01      		movw r14,r24
  28:version.h     ****     uint8_t super = version;
 580               		.loc 5 28 0
 581 0206 0E94 0000 		call __fixunssfsi
 582               	.LVL38:
 583 020a C62F      		mov r28,r22
 584               	.LVL39:
  29:version.h     ****     uint8_t sub = (version - super) * 10;
 585               		.loc 5 29 0
 586 020c 70E0      		ldi r23,0
 587 020e 80E0      		ldi r24,0
 588 0210 90E0      		ldi r25,0
 589 0212 0E94 0000 		call __floatsisf
 590               	.LVL40:
 591 0216 9B01      		movw r18,r22
 592 0218 AC01      		movw r20,r24
 593 021a C701      		movw r24,r14
 594 021c B601      		movw r22,r12
 595 021e 0E94 0000 		call __subsf3
 596               	.LVL41:
 597 0222 20E0      		ldi r18,0
 598 0224 30E0      		ldi r19,0
 599 0226 40E2      		ldi r20,lo8(32)
 600 0228 51E4      		ldi r21,lo8(65)
 601 022a 0E94 0000 		call __mulsf3
 602               	.LVL42:
 603 022e 0E94 0000 		call __fixunssfsi
 604               	.LVL43:
 605 0232 862F      		mov r24,r22
 606               	.LVL44:
  30:version.h     **** 
  31:version.h     ****     switch(super){
 607               		.loc 5 31 0
 608 0234 4C2F      		mov r20,r28
 609 0236 50E0      		ldi r21,0
 610 0238 FA01      		movw r30,r20
 611 023a 3197      		sbiw r30,1
 612 023c EA30      		cpi r30,10
 613 023e F105      		cpc r31,__zero_reg__
 614 0240 00F4      		brsh .L19
 615 0242 E050      		subi r30,lo8(-(gs(.L21)))
 616 0244 F040      		sbci r31,hi8(-(gs(.L21)))
 617 0246 0C94 0000 		jmp __tablejump2__
 618               		.section	.progmem.gcc_sw_table,"a",@progbits
 619               		.p2align	1
 620               	.L21:
 621 0000 0000      		.word gs(.L20)
 622 0002 0000      		.word gs(.L22)
 623 0004 0000      		.word gs(.L23)
 624 0006 0000      		.word gs(.L24)
 625 0008 0000      		.word gs(.L25)
 626 000a 0000      		.word gs(.L26)
 627 000c 0000      		.word gs(.L27)
 628 000e 0000      		.word gs(.L28)
 629 0010 0000      		.word gs(.L29)
 630 0012 0000      		.word gs(.L30)
 631               		.text
 632               	.L20:
  32:version.h     ****         case 1: pin_high(LED11); break;
 633               		.loc 5 32 0
 634 024a AB9A      		sbi 0x15,3
 635 024c 00C0      		rjmp .L19
 636               	.L22:
  33:version.h     ****         case 2: pin_high(LED12); break;
 637               		.loc 5 33 0
 638 024e 929A      		sbi 0x12,2
 639 0250 00C0      		rjmp .L19
 640               	.L23:
  34:version.h     ****         case 3: pin_high(LED13); break;
 641               		.loc 5 34 0
 642 0252 AA9A      		sbi 0x15,2
 643 0254 00C0      		rjmp .L19
 644               	.L24:
  35:version.h     ****         case 4: pin_high(LED14); break;
 645               		.loc 5 35 0
 646 0256 939A      		sbi 0x12,3
 647 0258 00C0      		rjmp .L19
 648               	.L25:
  36:version.h     ****         case 5: pin_high(LED15); break;
 649               		.loc 5 36 0
 650 025a A99A      		sbi 0x15,1
 651 025c 00C0      		rjmp .L19
 652               	.L26:
  37:version.h     ****         case 6: pin_high(LED16); break;
 653               		.loc 5 37 0
 654 025e 949A      		sbi 0x12,4
 655 0260 00C0      		rjmp .L19
 656               	.L27:
  38:version.h     ****         case 7: pin_high(LED17); break;
 657               		.loc 5 38 0
 658 0262 A89A      		sbi 0x15,0
 659 0264 00C0      		rjmp .L19
 660               	.L28:
  39:version.h     ****         case 8: pin_high(LED18); break;
 661               		.loc 5 39 0
 662 0266 959A      		sbi 0x12,5
 663 0268 00C0      		rjmp .L19
 664               	.L29:
  40:version.h     ****         case 9: pin_high(LED19); break;
 665               		.loc 5 40 0
 666 026a 979A      		sbi 0x12,7
 667 026c 00C0      		rjmp .L19
 668               	.L30:
  41:version.h     ****         case 10: pin_high(LED20); break;
 669               		.loc 5 41 0
 670 026e 969A      		sbi 0x12,6
 671               	.L19:
  42:version.h     ****     }
  43:version.h     **** 
  44:version.h     ****     switch(sub){
 672               		.loc 5 44 0
 673 0270 90E0      		ldi r25,0
 674 0272 FC01      		movw r30,r24
 675 0274 3197      		sbiw r30,1
 676 0276 EA30      		cpi r30,10
 677 0278 F105      		cpc r31,__zero_reg__
 678 027a 00F4      		brsh .L31
 679 027c E050      		subi r30,lo8(-(gs(.L33)))
 680 027e F040      		sbci r31,hi8(-(gs(.L33)))
 681 0280 0C94 0000 		jmp __tablejump2__
 682               		.section	.progmem.gcc_sw_table,"a",@progbits
 683               		.p2align	1
 684               	.L33:
 685 0014 0000      		.word gs(.L32)
 686 0016 0000      		.word gs(.L34)
 687 0018 0000      		.word gs(.L35)
 688 001a 0000      		.word gs(.L36)
 689 001c 0000      		.word gs(.L37)
 690 001e 0000      		.word gs(.L38)
 691 0020 0000      		.word gs(.L39)
 692 0022 0000      		.word gs(.L40)
 693 0024 0000      		.word gs(.L41)
 694 0026 0000      		.word gs(.L42)
 695               		.text
 696               	.L32:
  45:version.h     ****         case 1: pin_high(LED01); break;
 697               		.loc 5 45 0
 698 0284 C09A      		sbi 0x18,0
 699 0286 00C0      		rjmp .L31
 700               	.L34:
  46:version.h     ****         case 2: pin_high(LED02); break;
 701               		.loc 5 46 0
 702 0288 C19A      		sbi 0x18,1
 703 028a 00C0      		rjmp .L31
 704               	.L35:
  47:version.h     ****         case 3: pin_high(LED03); break;
 705               		.loc 5 47 0
 706 028c C29A      		sbi 0x18,2
 707 028e 00C0      		rjmp .L31
 708               	.L36:
  48:version.h     ****         case 4: pin_high(LED04); break;
 709               		.loc 5 48 0
 710 0290 C39A      		sbi 0x18,3
 711 0292 00C0      		rjmp .L31
 712               	.L37:
  49:version.h     ****         case 5: pin_high(LED05); break;
 713               		.loc 5 49 0
 714 0294 AF9A      		sbi 0x15,7
 715 0296 00C0      		rjmp .L31
 716               	.L38:
  50:version.h     ****         case 6: pin_high(LED06); break;
 717               		.loc 5 50 0
 718 0298 AE9A      		sbi 0x15,6
 719 029a 00C0      		rjmp .L31
 720               	.L39:
  51:version.h     ****         case 7: pin_high(LED07); break;
 721               		.loc 5 51 0
 722 029c AD9A      		sbi 0x15,5
 723 029e 00C0      		rjmp .L31
 724               	.L40:
  52:version.h     ****         case 8: pin_high(LED08); break;
 725               		.loc 5 52 0
 726 02a0 909A      		sbi 0x12,0
 727 02a2 00C0      		rjmp .L31
 728               	.L41:
  53:version.h     ****         case 9: pin_high(LED09); break;
 729               		.loc 5 53 0
 730 02a4 AC9A      		sbi 0x15,4
 731 02a6 00C0      		rjmp .L31
 732               	.L42:
  54:version.h     ****         case 10: pin_high(LED10); break;
 733               		.loc 5 54 0
 734 02a8 919A      		sbi 0x12,1
 735               	.L31:
  55:version.h     ****     }
  56:version.h     **** 
  57:version.h     ****     delay_ms(1000);
 736               		.loc 5 57 0
 737 02aa 88EE      		ldi r24,lo8(-24)
 738 02ac 93E0      		ldi r25,lo8(3)
 739 02ae 0E94 0000 		call delay_ms
 740               	.LVL45:
 741               	/* epilogue start */
  58:version.h     ****     LED_reset();
  59:version.h     **** }
 742               		.loc 5 59 0
 743 02b2 CF91      		pop r28
 744               	.LVL46:
 745 02b4 FF90      		pop r15
 746 02b6 EF90      		pop r14
 747 02b8 DF90      		pop r13
 748 02ba CF90      		pop r12
 749               	.LVL47:
  58:version.h     ****     LED_reset();
 750               		.loc 5 58 0
 751 02bc 0C94 0000 		jmp LED_reset
 752               	.LVL48:
 753               		.cfi_endproc
 754               	.LFE13:
 756               		.section	.text.startup,"ax",@progbits
 757               	.global	main
 759               	main:
 760               	.LFB14:
 761               		.file 6 "main.c"
   1:main.c        **** /*
   2:main.c        ****  * main.c
   3:main.c        ****  *
   4:main.c        ****  * Angle of Attack Indicator
   5:main.c        ****  * =========================
   6:main.c        ****  *
   7:main.c        ****  * The AoA indicator module receives prussure data via UART from AoA sensor module. It converts
   8:main.c        ****  * these data into inH2O values used to drive a 20 unit LED bargraph.
   9:main.c        ****  *
  10:main.c        ****  * Florian Meissner
  11:main.c        ****  * n1990b@gmx.de
  12:main.c        ****  * February 2018
  13:main.c        ****  *
  14:main.c        ****  *
  15:main.c        ****  */
  16:main.c        **** 
  17:main.c        **** 
  18:main.c        **** #ifndef F_CPU
  19:main.c        ****     #warning "Setting F_CPU to 1600000UL."
  20:main.c        ****     #define F_CPU 16000000UL
  21:main.c        **** #endif
  22:main.c        **** 
  23:main.c        **** 
  24:main.c        **** #include <avr/io.h>
  25:main.c        **** #include <stdint.h>
  26:main.c        **** #include "delay_ms.h"
  27:main.c        **** #include "io.h"
  28:main.c        **** #include "leds.h"
  29:main.c        **** #include "adc.h"
  30:main.c        **** #include "version.h"
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        **** #define VERSION 1.2 // Program version
  34:main.c        **** #define SENSOR 7    // ADC channel
  35:main.c        **** 
  36:main.c        **** 
  37:main.c        **** /**
  38:main.c        ****     @brief  Main program
  39:main.c        ****     @param  none
  40:main.c        ****     @return int
  41:main.c        **** **/
  42:main.c        **** int main(void)
  43:main.c        **** {
 762               		.loc 6 43 0
 763               		.cfi_startproc
 764               	/* prologue: function */
 765               	/* frame size = 0 */
 766               	/* stack size = 0 */
 767               	.L__stack_usage = 0
  44:main.c        ****     //Initializers
  45:main.c        ****     LED_init();     // LED's
 768               		.loc 6 45 0
 769 0000 0E94 0000 		call LED_init
 770               	.LVL49:
  46:main.c        ****     ADC_init();     // ADC
 771               		.loc 6 46 0
 772 0004 0E94 0000 		call ADC_init
 773               	.LVL50:
  47:main.c        **** 
  48:main.c        ****     // Output test run
  49:main.c        ****     lamptest();
 774               		.loc 6 49 0
 775 0008 0E94 0000 		call lamptest
 776               	.LVL51:
  50:main.c        ****     version(VERSION);
 777               		.loc 6 50 0
 778 000c 6AE9      		ldi r22,lo8(-102)
 779 000e 79E9      		ldi r23,lo8(-103)
 780 0010 89E9      		ldi r24,lo8(-103)
 781 0012 9FE3      		ldi r25,lo8(63)
 782 0014 0E94 0000 		call version
 783               	.LVL52:
 784               	.L64:
 785               	.LBB8:
  51:main.c        **** 
  52:main.c        ****     // Endless loop
  53:main.c        ****     while(1) {
  54:main.c        **** 
  55:main.c        ****         // turn off all LED's.
  56:main.c        ****         LED_reset();
 786               		.loc 6 56 0
 787 0018 0E94 0000 		call LED_reset
 788               	.LVL53:
  57:main.c        **** 
  58:main.c        ****         // Read new value from ADC. Average over 10 reads.
  59:main.c        ****         uint16_t adcval = ADC_Read_Avg(SENSOR, 10);
 789               		.loc 6 59 0
 790 001c 6AE0      		ldi r22,lo8(10)
 791 001e 87E0      		ldi r24,lo8(7)
 792 0020 0E94 0000 		call ADC_Read_Avg
 793               	.LVL54:
  60:main.c        **** 
  61:main.c        ****         // Set LED's according to value.
  62:main.c        ****         if (adcval <= 26) pin_high(LED20);
 794               		.loc 6 62 0
 795 0024 8B31      		cpi r24,27
 796 0026 9105      		cpc r25,__zero_reg__
 797 0028 00F4      		brsh .L44
 798               		.loc 6 62 0 is_stmt 0 discriminator 1
 799 002a 969A      		sbi 0x12,6
 800 002c 00C0      		rjmp .L45
 801               	.L44:
  63:main.c        ****         else if (adcval > 26 && adcval <= 52) pin_high(LED19);
 802               		.loc 6 63 0 is_stmt 1
 803 002e 9C01      		movw r18,r24
 804 0030 2B51      		subi r18,27
 805 0032 3109      		sbc r19,__zero_reg__
 806 0034 2A31      		cpi r18,26
 807 0036 3105      		cpc r19,__zero_reg__
 808 0038 00F4      		brsh .L46
 809               		.loc 6 63 0 is_stmt 0 discriminator 1
 810 003a 979A      		sbi 0x12,7
 811 003c 00C0      		rjmp .L45
 812               	.L46:
  64:main.c        ****         else if (adcval > 52 && adcval <= 78) pin_high(LED18);
 813               		.loc 6 64 0 is_stmt 1
 814 003e 9C01      		movw r18,r24
 815 0040 2553      		subi r18,53
 816 0042 3109      		sbc r19,__zero_reg__
 817 0044 2A31      		cpi r18,26
 818 0046 3105      		cpc r19,__zero_reg__
 819 0048 00F4      		brsh .L47
 820               		.loc 6 64 0 is_stmt 0 discriminator 1
 821 004a 959A      		sbi 0x12,5
 822 004c 00C0      		rjmp .L45
 823               	.L47:
  65:main.c        ****         else if (adcval > 78 && adcval <= 104) pin_high(LED17);
 824               		.loc 6 65 0 is_stmt 1
 825 004e 9C01      		movw r18,r24
 826 0050 2F54      		subi r18,79
 827 0052 3109      		sbc r19,__zero_reg__
 828 0054 2A31      		cpi r18,26
 829 0056 3105      		cpc r19,__zero_reg__
 830 0058 00F4      		brsh .L48
 831               		.loc 6 65 0 is_stmt 0 discriminator 1
 832 005a A89A      		sbi 0x15,0
 833 005c 00C0      		rjmp .L45
 834               	.L48:
  66:main.c        ****         else if (adcval > 104 && adcval <= 129) pin_high(LED16);
 835               		.loc 6 66 0 is_stmt 1
 836 005e 9C01      		movw r18,r24
 837 0060 2956      		subi r18,105
 838 0062 3109      		sbc r19,__zero_reg__
 839 0064 2931      		cpi r18,25
 840 0066 3105      		cpc r19,__zero_reg__
 841 0068 00F4      		brsh .L49
 842               		.loc 6 66 0 is_stmt 0 discriminator 1
 843 006a 949A      		sbi 0x12,4
 844 006c 00C0      		rjmp .L45
 845               	.L49:
  67:main.c        ****         else if (adcval > 129 && adcval <= 155) pin_high(LED15);
 846               		.loc 6 67 0 is_stmt 1
 847 006e 9C01      		movw r18,r24
 848 0070 2258      		subi r18,-126
 849 0072 3109      		sbc r19,__zero_reg__
 850 0074 2A31      		cpi r18,26
 851 0076 3105      		cpc r19,__zero_reg__
 852 0078 00F4      		brsh .L50
 853               		.loc 6 67 0 is_stmt 0 discriminator 1
 854 007a A99A      		sbi 0x15,1
 855 007c 00C0      		rjmp .L45
 856               	.L50:
  68:main.c        ****         else if (adcval > 155 && adcval <= 181) pin_high(LED14);
 857               		.loc 6 68 0 is_stmt 1
 858 007e 9C01      		movw r18,r24
 859 0080 2C59      		subi r18,-100
 860 0082 3109      		sbc r19,__zero_reg__
 861 0084 2A31      		cpi r18,26
 862 0086 3105      		cpc r19,__zero_reg__
 863 0088 00F4      		brsh .L51
 864               		.loc 6 68 0 is_stmt 0 discriminator 1
 865 008a 939A      		sbi 0x12,3
 866 008c 00C0      		rjmp .L45
 867               	.L51:
  69:main.c        ****         else if (adcval > 181 && adcval <= 207) pin_high(LED13);
 868               		.loc 6 69 0 is_stmt 1
 869 008e 9C01      		movw r18,r24
 870 0090 265B      		subi r18,-74
 871 0092 3109      		sbc r19,__zero_reg__
 872 0094 2A31      		cpi r18,26
 873 0096 3105      		cpc r19,__zero_reg__
 874 0098 00F4      		brsh .L52
 875               		.loc 6 69 0 is_stmt 0 discriminator 1
 876 009a AA9A      		sbi 0x15,2
 877 009c 00C0      		rjmp .L45
 878               	.L52:
  70:main.c        ****         else if (adcval > 207 && adcval <= 233) pin_high(LED12);
 879               		.loc 6 70 0 is_stmt 1
 880 009e 9C01      		movw r18,r24
 881 00a0 205D      		subi r18,-48
 882 00a2 3109      		sbc r19,__zero_reg__
 883 00a4 2A31      		cpi r18,26
 884 00a6 3105      		cpc r19,__zero_reg__
 885 00a8 00F4      		brsh .L53
 886               		.loc 6 70 0 is_stmt 0 discriminator 1
 887 00aa 929A      		sbi 0x12,2
 888 00ac 00C0      		rjmp .L45
 889               	.L53:
  71:main.c        ****         else if (adcval > 233 && adcval <= 259) pin_high(LED11);
 890               		.loc 6 71 0 is_stmt 1
 891 00ae 9C01      		movw r18,r24
 892 00b0 2A5E      		subi r18,-22
 893 00b2 3109      		sbc r19,__zero_reg__
 894 00b4 2A31      		cpi r18,26
 895 00b6 3105      		cpc r19,__zero_reg__
 896 00b8 00F4      		brsh .L54
 897               		.loc 6 71 0 is_stmt 0 discriminator 1
 898 00ba AB9A      		sbi 0x15,3
 899 00bc 00C0      		rjmp .L45
 900               	.L54:
  72:main.c        ****         else if (adcval > 259 && adcval <= 285) pin_high(LED10);
 901               		.loc 6 72 0 is_stmt 1
 902 00be 9C01      		movw r18,r24
 903 00c0 2450      		subi r18,4
 904 00c2 3140      		sbci r19,1
 905 00c4 2A31      		cpi r18,26
 906 00c6 3105      		cpc r19,__zero_reg__
 907 00c8 00F4      		brsh .L55
 908               		.loc 6 72 0 is_stmt 0 discriminator 1
 909 00ca 919A      		sbi 0x12,1
 910 00cc 00C0      		rjmp .L45
 911               	.L55:
  73:main.c        ****         else if (adcval > 285 && adcval <= 311) pin_high(LED09);
 912               		.loc 6 73 0 is_stmt 1
 913 00ce 9C01      		movw r18,r24
 914 00d0 2E51      		subi r18,30
 915 00d2 3140      		sbci r19,1
 916 00d4 2A31      		cpi r18,26
 917 00d6 3105      		cpc r19,__zero_reg__
 918 00d8 00F4      		brsh .L56
 919               		.loc 6 73 0 is_stmt 0 discriminator 1
 920 00da AC9A      		sbi 0x15,4
 921 00dc 00C0      		rjmp .L45
 922               	.L56:
  74:main.c        ****         else if (adcval > 311 && adcval <= 337) pin_high(LED08);
 923               		.loc 6 74 0 is_stmt 1
 924 00de 9C01      		movw r18,r24
 925 00e0 2853      		subi r18,56
 926 00e2 3140      		sbci r19,1
 927 00e4 2A31      		cpi r18,26
 928 00e6 3105      		cpc r19,__zero_reg__
 929 00e8 00F4      		brsh .L57
 930               		.loc 6 74 0 is_stmt 0 discriminator 1
 931 00ea 909A      		sbi 0x12,0
 932 00ec 00C0      		rjmp .L45
 933               	.L57:
  75:main.c        ****         else if (adcval > 337 && adcval <= 363) pin_high(LED07);
 934               		.loc 6 75 0 is_stmt 1
 935 00ee 9C01      		movw r18,r24
 936 00f0 2255      		subi r18,82
 937 00f2 3140      		sbci r19,1
 938 00f4 2A31      		cpi r18,26
 939 00f6 3105      		cpc r19,__zero_reg__
 940 00f8 00F4      		brsh .L58
 941               		.loc 6 75 0 is_stmt 0 discriminator 1
 942 00fa AD9A      		sbi 0x15,5
 943 00fc 00C0      		rjmp .L45
 944               	.L58:
  76:main.c        ****         else if (adcval > 363 && adcval <= 388) pin_high(LED06);
 945               		.loc 6 76 0 is_stmt 1
 946 00fe 9C01      		movw r18,r24
 947 0100 2C56      		subi r18,108
 948 0102 3140      		sbci r19,1
 949 0104 2931      		cpi r18,25
 950 0106 3105      		cpc r19,__zero_reg__
 951 0108 00F4      		brsh .L59
 952               		.loc 6 76 0 is_stmt 0 discriminator 1
 953 010a AE9A      		sbi 0x15,6
 954 010c 00C0      		rjmp .L45
 955               	.L59:
  77:main.c        ****         else if (adcval > 388 && adcval <= 414) pin_high(LED05);
 956               		.loc 6 77 0 is_stmt 1
 957 010e 9C01      		movw r18,r24
 958 0110 2558      		subi r18,-123
 959 0112 3140      		sbci r19,1
 960 0114 2A31      		cpi r18,26
 961 0116 3105      		cpc r19,__zero_reg__
 962 0118 00F4      		brsh .L60
 963               		.loc 6 77 0 is_stmt 0 discriminator 1
 964 011a AF9A      		sbi 0x15,7
 965 011c 00C0      		rjmp .L45
 966               	.L60:
  78:main.c        ****         else if (adcval > 414 && adcval <= 440) pin_high(LED04);
 967               		.loc 6 78 0 is_stmt 1
 968 011e 9C01      		movw r18,r24
 969 0120 2F59      		subi r18,-97
 970 0122 3140      		sbci r19,1
 971 0124 2A31      		cpi r18,26
 972 0126 3105      		cpc r19,__zero_reg__
 973 0128 00F4      		brsh .L61
 974               		.loc 6 78 0 is_stmt 0 discriminator 1
 975 012a C39A      		sbi 0x18,3
 976 012c 00C0      		rjmp .L45
 977               	.L61:
  79:main.c        ****         else if (adcval > 440 && adcval <= 466) pin_high(LED03);
 978               		.loc 6 79 0 is_stmt 1
 979 012e 9C01      		movw r18,r24
 980 0130 295B      		subi r18,-71
 981 0132 3140      		sbci r19,1
 982 0134 2A31      		cpi r18,26
 983 0136 3105      		cpc r19,__zero_reg__
 984 0138 00F4      		brsh .L62
 985               		.loc 6 79 0 is_stmt 0 discriminator 1
 986 013a C29A      		sbi 0x18,2
 987 013c 00C0      		rjmp .L45
 988               	.L62:
  80:main.c        ****         else if (adcval > 466 && adcval <= 492) pin_high(LED02);
 989               		.loc 6 80 0 is_stmt 1
 990 013e 835D      		subi r24,-45
 991 0140 9140      		sbci r25,1
 992               	.LVL55:
 993 0142 4A97      		sbiw r24,26
 994 0144 00F4      		brsh .L63
 995               		.loc 6 80 0 is_stmt 0 discriminator 1
 996 0146 C19A      		sbi 0x18,1
 997 0148 00C0      		rjmp .L45
 998               	.L63:
  81:main.c        ****         else if (adcval > 492) pin_high(LED01);
 999               		.loc 6 81 0 is_stmt 1 discriminator 1
 1000 014a C09A      		sbi 0x18,0
 1001               	.LVL56:
 1002               	.L45:
  82:main.c        **** 
  83:main.c        ****         delay_ms(100);
 1003               		.loc 6 83 0
 1004 014c 84E6      		ldi r24,lo8(100)
 1005 014e 90E0      		ldi r25,0
 1006 0150 0E94 0000 		call delay_ms
 1007               	.LVL57:
 1008               	.LBE8:
  84:main.c        ****     }
 1009               		.loc 6 84 0
 1010 0154 00C0      		rjmp .L64
 1011               		.cfi_endproc
 1012               	.LFE14:
 1014               		.text
 1015               	.Letext0:
 1016               		.file 7 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc4spfWI.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc4spfWI.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc4spfWI.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc4spfWI.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc4spfWI.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc4spfWI.s:12     .text:0000000000000000 delay_ms
     /tmp/cc4spfWI.s:54     .text:000000000000001c LED_reset
     /tmp/cc4spfWI.s:109    .text:0000000000000046 LED_init
     /tmp/cc4spfWI.s:165    .text:0000000000000072 lamptest
     /tmp/cc4spfWI.s:360    .text:0000000000000164 ADC_init
     /tmp/cc4spfWI.s:401    .text:0000000000000182 ADC_Read
     /tmp/cc4spfWI.s:433    .text:0000000000000198 ADC_Read_Avg
     /tmp/cc4spfWI.s:548    .text:00000000000001f8 version
     /tmp/cc4spfWI.s:759    .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
__udivmodsi4
__fixunssfsi
__floatsisf
__subsf3
__mulsf3
__tablejump2__
